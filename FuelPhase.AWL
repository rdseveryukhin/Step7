DATA_BLOCK "Emergency Blocks"
TITLE =
VERSION : 0.1


  STRUCT 	
   HS_EZ_01 : BOOL ;	
   HS_EZ_02 : BOOL ;	
   HS_EZ_03 : BOOL ;	
   HS_EZ_04 : BOOL ;	
   HS_EZ_05 : BOOL ;	
   HS_EZ_06 : BOOL ;	
   HS_EZ_07 : BOOL ;	
   HS_EZ_08 : BOOL ;	
   HS_EZ_09 : BOOL ;	
   HS_EZ_11 : BOOL ;	
   HS_EZ_12 : BOOL ;	
   HS_EZ_13 : BOOL ;	
   HS_EZ_14 : BOOL ;	
   HS_EZ_15 : BOOL ;	
   reserve : BOOL ;	
   HS_EZ_49 : BOOL ;	
   UPS_OK : BOOL ;	
   UPS_BAT_FAULT : BOOL ;	
   COMM1_ERROR : BOOL ;	
  END_STRUCT ;	
BEGIN
   HS_EZ_01 := TRUE; 
   HS_EZ_02 := FALSE; 
   HS_EZ_03 := FALSE; 
   HS_EZ_04 := FALSE; 
   HS_EZ_05 := FALSE; 
   HS_EZ_06 := FALSE; 
   HS_EZ_07 := FALSE; 
   HS_EZ_08 := FALSE; 
   HS_EZ_09 := FALSE; 
   HS_EZ_11 := FALSE; 
   HS_EZ_12 := FALSE; 
   HS_EZ_13 := FALSE; 
   HS_EZ_14 := FALSE; 
   HS_EZ_15 := FALSE; 
   reserve := FALSE; 
   HS_EZ_49 := FALSE; 
   UPS_OK := FALSE; 
   UPS_BAT_FAULT := FALSE; 
   COMM1_ERROR := FALSE; 
END_DATA_BLOCK


DATA_BLOCK DB 24
TITLE =
VERSION : 0.1


  STRUCT 	
   Status_start : BOOL ;	//Program is started
   Status_ready : BOOL ;	//FP is ready
   Minoil_start : BOOL ;	//Min. oil downloading is started
   Emuls1_start : BOOL ;	//Emulgator1 downloading is started
   Emuls2_start : BOOL ;	//Emulgator2 downloading is started
   Mixer_start : BOOL ;	//Mixer is started
   IBC_start : BOOL ;	//Transfer to IBC
   Mixer_ES : BOOL ;	//Mixer emergency stop
   Mixer_stop : BOOL ;	//Stop mixer
   Minoil_stop : BOOL ;	//Stop min. oil downloading
   Emuls1_stop : BOOL ;	//Stop emulgator1 downloading
   Emuls2_stop : BOOL ;	//Stop emulgator2 downloading
   IBC_stop : BOOL ;	//Stop transfer to IBC
   Process_busy : BOOL ;	//Process is started
   IBC_start_auto : BOOL ;	//Transfer to IBC auto mode
   Status_stop : BOOL ;	//Stop programm
   Current_id : INT ;	//Current recipe
   Recipe : STRUCT 	
    rec_id : INT ;	//Number of recipe
    weight : REAL ;	//Common weqght (kg)
    minoil_amount : REAL ;	//Min. oil amount (kg)
    minoil_capacity : REAL ;	//Min. oil capacity (%)
    emuls1_amount : REAL ;	//Emulgator1 amount (kg)
    emuls1_capacity : REAL ;	//Emulgator1 capacity (%)
    emuls2_amount : REAL ;	//Emulgator2 amount (kg)
    emuls2_capacity : REAL ;	//Emulgator2 capacity (%)
    mixer_time : DINT ;	//Mixing time (min)
    mixer_using : BOOL  := TRUE;	//Using mixer (yes/no)
   END_STRUCT ;	
   Weight_control : REAL  := 1.000000e+000;	//Setpoint of control liquid in capacity B-FS-09
   Error : WORD ;	//Errors
   Idling_time : DINT  := L#30;	//Time to determine idling "DB_P-FS-10M"
   Idling_control : REAL ;	//Capacity weqght in previous cycle PLC
   IBC_setpoint : REAL  := 9.000000e+002;	//Allowable weight of IBC
   IBC_start_value : REAL ;	//Weight before transfering to IBC
   Max_value : REAL  := 1.350000e+003;	//Allowable weight of B-FS-09
   IBC_stop_auto : BOOL ;	//Stop transfer to IBC auto mode
   FrontMerker1 : BOOL ;	//Bit for rising edge
   Program_interrupt : BOOL ;	//Programm is aborted
   Mixer_enable : BOOL ;	//Start mixer auto mode
   Mixer_end : BOOL ;	//Finish mixer due time
   Warning : WORD ;	//Warnings
   Control : DWORD ;	//Operation from WinCC
   minoil_balance_value : REAL ;	//Equal values min. oil amount and capacity
   emuls1_balance_value : REAL ;	//Equal values emulgator1 amount and capacity
   emuls2_balance_value : REAL ;	//Equal values emulgator2 amount and capacity
   Reset : WORD ;	//Reset errors
   Max_value_limit : REAL  := 9.500000e+001;	//Percent from setpoint max allowable weight of B-FS-09
   Minoil_amount_current : REAL ;	//Current min. oil value 
   Emuls1_amount_current : REAL ;	//Current emulgator1 value 
   Emuls2_amount_current : REAL ;	//Current emulgator2 value 
   Common_amount_current : REAL ;	//Common weight
   Minoil_capacity_current : REAL ;	//Current min. oil per cent
   Emuls1_capacity_current : REAL ;	//Current emulgator1 per cent
   Emuls2_capacity_current : REAL ;	//Current emulgator2 per cent
   Common_capacity_current : REAL ;	//Per cent of filling
   Previous_weight : REAL ;	//Weight in previous cycle
   IBC_setpoint_HL : REAL  := 9.000000e+002;	//Max allowable setpoint of weight IBC
   Max_value_HL : REAL  := 1.350000e+003;	//Max allowable setpoint of weight B-FS-09
   rec_name : STRING  [20 ];	//Name of current recipe
   Mixer_timer : INT ;	//Actual time of mixer working
  END_STRUCT ;	
BEGIN
   Status_start := FALSE; 
   Status_ready := FALSE; 
   Minoil_start := FALSE; 
   Emuls1_start := FALSE; 
   Emuls2_start := FALSE; 
   Mixer_start := FALSE; 
   IBC_start := FALSE; 
   Mixer_ES := FALSE; 
   Mixer_stop := FALSE; 
   Minoil_stop := FALSE; 
   Emuls1_stop := FALSE; 
   Emuls2_stop := FALSE; 
   IBC_stop := FALSE; 
   Process_busy := FALSE; 
   IBC_start_auto := FALSE; 
   Status_stop := FALSE; 
   Current_id := 0; 
   Recipe.rec_id := 0; 
   Recipe.weight := 0.000000e+000; 
   Recipe.minoil_amount := 0.000000e+000; 
   Recipe.minoil_capacity := 0.000000e+000; 
   Recipe.emuls1_amount := 0.000000e+000; 
   Recipe.emuls1_capacity := 0.000000e+000; 
   Recipe.emuls2_amount := 0.000000e+000; 
   Recipe.emuls2_capacity := 0.000000e+000; 
   Recipe.mixer_time := L#0; 
   Recipe.mixer_using := TRUE; 
   Weight_control := 1.000000e+000; 
   Error := W#16#0; 
   Idling_time := L#30; 
   Idling_control := 0.000000e+000; 
   IBC_setpoint := 9.000000e+002; 
   IBC_start_value := 0.000000e+000; 
   Max_value := 1.350000e+003; 
   IBC_stop_auto := FALSE; 
   FrontMerker1 := FALSE; 
   Program_interrupt := FALSE; 
   Mixer_enable := FALSE; 
   Mixer_end := FALSE; 
   Warning := W#16#0; 
   Control := DW#16#0; 
   minoil_balance_value := 0.000000e+000; 
   emuls1_balance_value := 0.000000e+000; 
   emuls2_balance_value := 0.000000e+000; 
   Reset := W#16#0; 
   Max_value_limit := 9.500000e+001; 
   Minoil_amount_current := 0.000000e+000; 
   Emuls1_amount_current := 0.000000e+000; 
   Emuls2_amount_current := 0.000000e+000; 
   Common_amount_current := 0.000000e+000; 
   Minoil_capacity_current := 0.000000e+000; 
   Emuls1_capacity_current := 0.000000e+000; 
   Emuls2_capacity_current := 0.000000e+000; 
   Common_capacity_current := 0.000000e+000; 
   Previous_weight := 0.000000e+000; 
   IBC_setpoint_HL := 9.000000e+002; 
   Max_value_HL := 1.350000e+003; 
   rec_name := ''; 
   Mixer_timer := 0; 
END_DATA_BLOCK

DATA_BLOCK "Recipes Block"
TITLE =
VERSION : 0.1


  STRUCT 	
   Recipe1 : STRUCT 	
    rec_id : INT  := 1;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe2 : STRUCT 	
    rec_id : INT  := 2;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe3 : STRUCT 	
    rec_id : INT  := 3;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe4 : STRUCT 	
    rec_id : INT  := 4;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe5 : STRUCT 	
    rec_id : INT  := 5;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe6 : STRUCT 	
    rec_id : INT  := 6;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe7 : STRUCT 	
    rec_id : INT  := 7;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe8 : STRUCT 	
    rec_id : INT  := 8;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe9 : STRUCT 	
    rec_id : INT  := 9;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe10 : STRUCT 	
    rec_id : INT  := 10;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe11 : STRUCT 	
    rec_id : INT  := 11;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe12 : STRUCT 	
    rec_id : INT  := 12;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe13 : STRUCT 	
    rec_id : INT  := 13;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe14 : STRUCT 	
    rec_id : INT  := 14;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe15 : STRUCT 	
    rec_id : INT  := 15;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe16 : STRUCT 	
    rec_id : INT  := 16;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe17 : STRUCT 	
    rec_id : INT  := 17;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe18 : STRUCT 	
    rec_id : INT  := 18;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe19 : STRUCT 	
    rec_id : INT  := 19;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
   Recipe20 : STRUCT 	
    rec_id : INT  := 20;	
    weight : REAL ;	
    minoil_amount : REAL ;	
    minoil_capacity : REAL ;	
    emuls1_amount : REAL ;	
    emuls1_capacity : REAL ;	
    emuls2_amount : REAL ;	
    emuls2_capacity : REAL ;	
    mixer_time : DINT ;	
    mixer_using : BOOL  := TRUE;	
    rec_title : STRING  [20 ];	
   END_STRUCT ;	
  END_STRUCT ;	
BEGIN
   Recipe1.rec_id := 1; 
   Recipe1.weight := 0.000000e+000; 
   Recipe1.minoil_amount := 0.000000e+000; 
   Recipe1.minoil_capacity := 0.000000e+000; 
   Recipe1.emuls1_amount := 0.000000e+000; 
   Recipe1.emuls1_capacity := 0.000000e+000; 
   Recipe1.emuls2_amount := 0.000000e+000; 
   Recipe1.emuls2_capacity := 0.000000e+000; 
   Recipe1.mixer_time := L#0; 
   Recipe1.mixer_using := TRUE; 
   Recipe1.rec_title := ''; 
   Recipe2.rec_id := 2; 
   Recipe2.weight := 0.000000e+000; 
   Recipe2.minoil_amount := 0.000000e+000; 
   Recipe2.minoil_capacity := 0.000000e+000; 
   Recipe2.emuls1_amount := 0.000000e+000; 
   Recipe2.emuls1_capacity := 0.000000e+000; 
   Recipe2.emuls2_amount := 0.000000e+000; 
   Recipe2.emuls2_capacity := 0.000000e+000; 
   Recipe2.mixer_time := L#0; 
   Recipe2.mixer_using := TRUE; 
   Recipe2.rec_title := ''; 
   Recipe3.rec_id := 3; 
   Recipe3.weight := 0.000000e+000; 
   Recipe3.minoil_amount := 0.000000e+000; 
   Recipe3.minoil_capacity := 0.000000e+000; 
   Recipe3.emuls1_amount := 0.000000e+000; 
   Recipe3.emuls1_capacity := 0.000000e+000; 
   Recipe3.emuls2_amount := 0.000000e+000; 
   Recipe3.emuls2_capacity := 0.000000e+000; 
   Recipe3.mixer_time := L#0; 
   Recipe3.mixer_using := TRUE; 
   Recipe3.rec_title := ''; 
   Recipe4.rec_id := 4; 
   Recipe4.weight := 0.000000e+000; 
   Recipe4.minoil_amount := 0.000000e+000; 
   Recipe4.minoil_capacity := 0.000000e+000; 
   Recipe4.emuls1_amount := 0.000000e+000; 
   Recipe4.emuls1_capacity := 0.000000e+000; 
   Recipe4.emuls2_amount := 0.000000e+000; 
   Recipe4.emuls2_capacity := 0.000000e+000; 
   Recipe4.mixer_time := L#0; 
   Recipe4.mixer_using := TRUE; 
   Recipe4.rec_title := ''; 
   Recipe5.rec_id := 5; 
   Recipe5.weight := 0.000000e+000; 
   Recipe5.minoil_amount := 0.000000e+000; 
   Recipe5.minoil_capacity := 0.000000e+000; 
   Recipe5.emuls1_amount := 0.000000e+000; 
   Recipe5.emuls1_capacity := 0.000000e+000; 
   Recipe5.emuls2_amount := 0.000000e+000; 
   Recipe5.emuls2_capacity := 0.000000e+000; 
   Recipe5.mixer_time := L#0; 
   Recipe5.mixer_using := TRUE; 
   Recipe5.rec_title := ''; 
   Recipe6.rec_id := 6; 
   Recipe6.weight := 0.000000e+000; 
   Recipe6.minoil_amount := 0.000000e+000; 
   Recipe6.minoil_capacity := 0.000000e+000; 
   Recipe6.emuls1_amount := 0.000000e+000; 
   Recipe6.emuls1_capacity := 0.000000e+000; 
   Recipe6.emuls2_amount := 0.000000e+000; 
   Recipe6.emuls2_capacity := 0.000000e+000; 
   Recipe6.mixer_time := L#0; 
   Recipe6.mixer_using := TRUE; 
   Recipe6.rec_title := ''; 
   Recipe7.rec_id := 7; 
   Recipe7.weight := 0.000000e+000; 
   Recipe7.minoil_amount := 0.000000e+000; 
   Recipe7.minoil_capacity := 0.000000e+000; 
   Recipe7.emuls1_amount := 0.000000e+000; 
   Recipe7.emuls1_capacity := 0.000000e+000; 
   Recipe7.emuls2_amount := 0.000000e+000; 
   Recipe7.emuls2_capacity := 0.000000e+000; 
   Recipe7.mixer_time := L#0; 
   Recipe7.mixer_using := TRUE; 
   Recipe7.rec_title := ''; 
   Recipe8.rec_id := 8; 
   Recipe8.weight := 0.000000e+000; 
   Recipe8.minoil_amount := 0.000000e+000; 
   Recipe8.minoil_capacity := 0.000000e+000; 
   Recipe8.emuls1_amount := 0.000000e+000; 
   Recipe8.emuls1_capacity := 0.000000e+000; 
   Recipe8.emuls2_amount := 0.000000e+000; 
   Recipe8.emuls2_capacity := 0.000000e+000; 
   Recipe8.mixer_time := L#0; 
   Recipe8.mixer_using := TRUE; 
   Recipe8.rec_title := ''; 
   Recipe9.rec_id := 9; 
   Recipe9.weight := 0.000000e+000; 
   Recipe9.minoil_amount := 0.000000e+000; 
   Recipe9.minoil_capacity := 0.000000e+000; 
   Recipe9.emuls1_amount := 0.000000e+000; 
   Recipe9.emuls1_capacity := 0.000000e+000; 
   Recipe9.emuls2_amount := 0.000000e+000; 
   Recipe9.emuls2_capacity := 0.000000e+000; 
   Recipe9.mixer_time := L#0; 
   Recipe9.mixer_using := TRUE; 
   Recipe9.rec_title := ''; 
   Recipe10.rec_id := 10; 
   Recipe10.weight := 0.000000e+000; 
   Recipe10.minoil_amount := 0.000000e+000; 
   Recipe10.minoil_capacity := 0.000000e+000; 
   Recipe10.emuls1_amount := 0.000000e+000; 
   Recipe10.emuls1_capacity := 0.000000e+000; 
   Recipe10.emuls2_amount := 0.000000e+000; 
   Recipe10.emuls2_capacity := 0.000000e+000; 
   Recipe10.mixer_time := L#0; 
   Recipe10.mixer_using := TRUE; 
   Recipe10.rec_title := ''; 
   Recipe11.rec_id := 11; 
   Recipe11.weight := 0.000000e+000; 
   Recipe11.minoil_amount := 0.000000e+000; 
   Recipe11.minoil_capacity := 0.000000e+000; 
   Recipe11.emuls1_amount := 0.000000e+000; 
   Recipe11.emuls1_capacity := 0.000000e+000; 
   Recipe11.emuls2_amount := 0.000000e+000; 
   Recipe11.emuls2_capacity := 0.000000e+000; 
   Recipe11.mixer_time := L#0; 
   Recipe11.mixer_using := TRUE; 
   Recipe11.rec_title := ''; 
   Recipe12.rec_id := 12; 
   Recipe12.weight := 0.000000e+000; 
   Recipe12.minoil_amount := 0.000000e+000; 
   Recipe12.minoil_capacity := 0.000000e+000; 
   Recipe12.emuls1_amount := 0.000000e+000; 
   Recipe12.emuls1_capacity := 0.000000e+000; 
   Recipe12.emuls2_amount := 0.000000e+000; 
   Recipe12.emuls2_capacity := 0.000000e+000; 
   Recipe12.mixer_time := L#0; 
   Recipe12.mixer_using := TRUE; 
   Recipe12.rec_title := ''; 
   Recipe13.rec_id := 13; 
   Recipe13.weight := 0.000000e+000; 
   Recipe13.minoil_amount := 0.000000e+000; 
   Recipe13.minoil_capacity := 0.000000e+000; 
   Recipe13.emuls1_amount := 0.000000e+000; 
   Recipe13.emuls1_capacity := 0.000000e+000; 
   Recipe13.emuls2_amount := 0.000000e+000; 
   Recipe13.emuls2_capacity := 0.000000e+000; 
   Recipe13.mixer_time := L#0; 
   Recipe13.mixer_using := TRUE; 
   Recipe13.rec_title := ''; 
   Recipe14.rec_id := 14; 
   Recipe14.weight := 0.000000e+000; 
   Recipe14.minoil_amount := 0.000000e+000; 
   Recipe14.minoil_capacity := 0.000000e+000; 
   Recipe14.emuls1_amount := 0.000000e+000; 
   Recipe14.emuls1_capacity := 0.000000e+000; 
   Recipe14.emuls2_amount := 0.000000e+000; 
   Recipe14.emuls2_capacity := 0.000000e+000; 
   Recipe14.mixer_time := L#0; 
   Recipe14.mixer_using := TRUE; 
   Recipe14.rec_title := ''; 
   Recipe15.rec_id := 15; 
   Recipe15.weight := 0.000000e+000; 
   Recipe15.minoil_amount := 0.000000e+000; 
   Recipe15.minoil_capacity := 0.000000e+000; 
   Recipe15.emuls1_amount := 0.000000e+000; 
   Recipe15.emuls1_capacity := 0.000000e+000; 
   Recipe15.emuls2_amount := 0.000000e+000; 
   Recipe15.emuls2_capacity := 0.000000e+000; 
   Recipe15.mixer_time := L#0; 
   Recipe15.mixer_using := TRUE; 
   Recipe15.rec_title := ''; 
   Recipe16.rec_id := 16; 
   Recipe16.weight := 0.000000e+000; 
   Recipe16.minoil_amount := 0.000000e+000; 
   Recipe16.minoil_capacity := 0.000000e+000; 
   Recipe16.emuls1_amount := 0.000000e+000; 
   Recipe16.emuls1_capacity := 0.000000e+000; 
   Recipe16.emuls2_amount := 0.000000e+000; 
   Recipe16.emuls2_capacity := 0.000000e+000; 
   Recipe16.mixer_time := L#0; 
   Recipe16.mixer_using := TRUE; 
   Recipe16.rec_title := ''; 
   Recipe17.rec_id := 17; 
   Recipe17.weight := 0.000000e+000; 
   Recipe17.minoil_amount := 0.000000e+000; 
   Recipe17.minoil_capacity := 0.000000e+000; 
   Recipe17.emuls1_amount := 0.000000e+000; 
   Recipe17.emuls1_capacity := 0.000000e+000; 
   Recipe17.emuls2_amount := 0.000000e+000; 
   Recipe17.emuls2_capacity := 0.000000e+000; 
   Recipe17.mixer_time := L#0; 
   Recipe17.mixer_using := TRUE; 
   Recipe17.rec_title := ''; 
   Recipe18.rec_id := 18; 
   Recipe18.weight := 0.000000e+000; 
   Recipe18.minoil_amount := 0.000000e+000; 
   Recipe18.minoil_capacity := 0.000000e+000; 
   Recipe18.emuls1_amount := 0.000000e+000; 
   Recipe18.emuls1_capacity := 0.000000e+000; 
   Recipe18.emuls2_amount := 0.000000e+000; 
   Recipe18.emuls2_capacity := 0.000000e+000; 
   Recipe18.mixer_time := L#0; 
   Recipe18.mixer_using := TRUE; 
   Recipe18.rec_title := ''; 
   Recipe19.rec_id := 19; 
   Recipe19.weight := 0.000000e+000; 
   Recipe19.minoil_amount := 0.000000e+000; 
   Recipe19.minoil_capacity := 0.000000e+000; 
   Recipe19.emuls1_amount := 0.000000e+000; 
   Recipe19.emuls1_capacity := 0.000000e+000; 
   Recipe19.emuls2_amount := 0.000000e+000; 
   Recipe19.emuls2_capacity := 0.000000e+000; 
   Recipe19.mixer_time := L#0; 
   Recipe19.mixer_using := TRUE; 
   Recipe19.rec_title := ''; 
   Recipe20.rec_id := 20; 
   Recipe20.weight := 0.000000e+000; 
   Recipe20.minoil_amount := 0.000000e+000; 
   Recipe20.minoil_capacity := 0.000000e+000; 
   Recipe20.emuls1_amount := 0.000000e+000; 
   Recipe20.emuls1_capacity := 0.000000e+000; 
   Recipe20.emuls2_amount := 0.000000e+000; 
   Recipe20.emuls2_capacity := 0.000000e+000; 
   Recipe20.mixer_time := L#0; 
   Recipe20.mixer_using := TRUE; 
   Recipe20.rec_title := ''; 
END_DATA_BLOCK

FUNCTION_BLOCK "FB_Freq_Converters"
TITLE =
VERSION : 0.1


VAR_INPUT
  Start_WinCC : BOOL ;	
  Start_OP : BOOL ;	
  Start_Button : BOOL ;	
  Start_Reserve : BOOL ;	
  Stop_WinCC : BOOL ;	
  Stop_OP : BOOL ;	
  Stop_Button : BOOL ;	
  Stop_Reserve : BOOL ;	
  Remote_Switch : BOOL ;	
  Aux_Switch : BOOL ;	
  Reset_Error : BOOL ;	
  Error_Time : INT ;	
END_VAR
VAR_OUTPUT
  Start : BOOL ;	
  Stop : BOOL ;	
  Status_ON : BOOL ;	
  Status_OFF : BOOL ;	
  Error : BOOL ;	
  Hold : BOOL ;	
  MT_mode : BOOL ;	
  Reset : BOOL ;	
  Simulation : BOOL ;	
END_VAR
VAR_IN_OUT
  Analog_Set_Value : WORD ;	
  FB_Analog : WORD ;	
  Analog_Output : WORD ;	
  Cycles : INT ;	
  On_Time : DINT ;	
  Off_Time : DINT ;	
END_VAR
VAR
  pulse : BOOL ;	
  Pulse_On_Time : BOOL ;	
  Pulse_Off_Time : BOOL ;	
  Pulse_cycles : BOOL ;	
  count : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =Ñèìóëÿöèÿ îáðàòíîé ñâÿçè

      A     #Simulation; 
      A     #Start; 
      AN    #Stop; 
      JNB   _011; 
      =     #Aux_Switch; 
_011: NOP   0; 
NETWORK
TITLE =Âûñòàâëåíèå îøèáêè îáðàòíîé ñâÿçè (ñ÷åò÷èê îæèäàíèÿ îá.ñâÿçè)

      A(    ; 
      A(    ; 
      A     #Start; 
      AN    #Aux_Switch; 
      O     ; 
      A     #Stop; 
      A     #Aux_Switch; 
      )     ; 
      A     "Voltage control".SV_MCC1; 
      A     "1sec"; 
      FP    #pulse; 
      JNB   _001; 
      L     #count; 
      L     1; 
      +I    ; 
      T     #count; 
      AN    OV; 
      SAVE  ; 
      CLR   ; 
_001: A     BR; 
      )     ; 
      A(    ; 
      L     #Error_Time; 
      L     #count; 
      ==I   ; 
      )     ; 
      JNB   _002; 
      L     0; 
      T     #count; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_002: A     BR; 
      S     #Error; 
NETWORK
TITLE =Ñáðîñ îøèáêè îáðàòíîé ñâÿçè

      A     #Reset_Error; 
      R     #Error; 
NETWORK
TITLE =Ñáðîñ ñ÷åò÷èêà

      A(    ; 
      A     #Start; 
      A     #Aux_Switch; 
      O     ; 
      A     #Stop; 
      AN    #Aux_Switch; 
      O     #Error; 
      )     ; 
      JNB   _003; 
      L     0; 
      T     #count; 
_003: NOP   0; 
NETWORK
TITLE =Ñòàðò ìîòîðà

      A(    ; 
      O     #Start_WinCC; 
      O     #Start_OP; 
      O     #Start_Button; 
      )     ; 
      A     #Remote_Switch; 
      AN    #Aux_Switch; 
      AN    #MT_mode; 
      JNB   _004; 
      CALL "Write Analog Value" (
           AI                       := #Analog_Set_Value,
           HighLevel                := 100,
           LowLevel                 := 0,
           AO                       := #Analog_Output,
           Out_of_range             := "NULL");
_004: A     BR; 
      S     #Start; 
      R     #Stop; 
NETWORK
TITLE =Ñòîï ìîòîðà

      A(    ; 
      A(    ; 
      O     #Stop_WinCC; 
      O     #Stop_OP; 
      O     #Stop_Button; 
      )     ; 
      A     #Remote_Switch; 
      A     #Aux_Switch; 
      O     ; 
      AN    #Remote_Switch; 
      A     #Aux_Switch; 
      O     #Error; 
      )     ; 
      AN    #MT_mode; 
      JNB   _005; 
      CALL "Write Analog Value" (
           AI                       := W#16#0,
           HighLevel                := 100,
           LowLevel                 := 0,
           AO                       := #Analog_Output,
           Out_of_range             := "NULL");
_005: A     BR; 
      S     #Stop; 
      R     #Start; 
NETWORK
TITLE =Ñèìóëÿöèÿ îáðàòíîé ñâÿçè îò ÷àñòîòíèêîâ

      L     #Analog_Set_Value; 
      T     #FB_Analog; 

NETWORK
TITLE =Ïåðåñûëêà àíàëîãîâîãî çíà÷åíèÿ



      A     #Start; 
      A     #Remote_Switch; 
      A     #Aux_Switch; 
      AN    #Error; 
      AN    #MT_mode; 
      JNB   _006; 
      CALL "Write Analog Value" (
           AI                       := #Analog_Set_Value,
           HighLevel                := 100,
           LowLevel                 := 0,
           AO                       := #Analog_Output,
           Out_of_range             := "NULL");
_006: NOP   0; 
NETWORK
TITLE =Óñòàíîâêà ñòàòóñîâ

      A     #Remote_Switch; 
      A     #Aux_Switch; 
      AN    #Error; 
      =     #Status_ON; 

//     A     #Remote_Switch
      AN    #Aux_Switch; 
      AN    #Error; 
      =     #Status_OFF; 


NETWORK
TITLE =Ðàñ÷åò âðåìåíè ðàáîòû/ïðîñòîÿ è öèêëîâ âêëþ÷åíèÿ

// On_Time counting
      A     #Status_ON; 
      AN    #MT_mode; 
      A     "1sec"; 
      FP    #Pulse_On_Time; 
      JNB   _007; 
      L     #On_Time; 
      L     1; //1 sec
      +D    ; 
      T     #On_Time; 
_007: NOP   0; 

// Off_Time counting
      A     #Status_OFF; 
      AN    #MT_mode; 
      A     "1sec"; 
      FP    #Pulse_Off_Time; 
      JNB   _008; 
      L     #Off_Time; 
      L     1; //1 sec
      +D    ; 
      T     #Off_Time; 
_008: NOP   0; 

//Cycles counting
      A     #Status_ON; 
      FP    #Pulse_cycles; 
      JNB   _009; 
      L     #Cycles; 
      L     1; 
      +I    ; 
      T     #Cycles; 
_009: NOP   0; 

//Reset counting
      A     #Reset; 
      JNB   _010; 
      L     0; 
      T     #On_Time; 
      T     #Off_Time; 
      L     0; 
      T     #Cycles; 
      R     #Reset; 
_010: NOP   0; 
NETWORK
TITLE =Ñáðîñ êíîïîê
//
//
      A     #Start_WinCC; 
      R     #Start_WinCC; 

      A     #Start_OP; 
      R     #Start_OP; 

      A     #Stop_WinCC; 
      R     #Stop_WinCC; 

      A     #Stop_OP; 
      R     #Stop_OP; 

      A     #Reset_Error; 
      R     #Reset_Error; 



END_FUNCTION_BLOCK

DATA_BLOCK "DB_P-FS-02M"
TITLE =
VERSION : 0.1

"FB_Freq_Converters"
BEGIN
   Start_WinCC := FALSE; 
   Start_OP := FALSE; 
   Start_Button := FALSE; 
   Start_Reserve := FALSE; 
   Stop_WinCC := FALSE; 
   Stop_OP := FALSE; 
   Stop_Button := FALSE; 
   Stop_Reserve := FALSE; 
   Remote_Switch := FALSE; 
   Aux_Switch := FALSE; 
   Reset_Error := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_ON := FALSE; 
   Status_OFF := FALSE; 
   Error := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   Analog_Set_Value := W#16#0; 
   FB_Analog := W#16#0; 
   Analog_Output := W#16#0; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   count := 0; 
END_DATA_BLOCK

DATA_BLOCK "DB_P-FS-03M"
TITLE =
VERSION : 0.1

"FB_Freq_Converters"
BEGIN
   Start_WinCC := FALSE; 
   Start_OP := FALSE; 
   Start_Button := FALSE; 
   Start_Reserve := FALSE; 
   Stop_WinCC := FALSE; 
   Stop_OP := FALSE; 
   Stop_Button := FALSE; 
   Stop_Reserve := FALSE; 
   Remote_Switch := FALSE; 
   Aux_Switch := FALSE; 
   Reset_Error := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_ON := FALSE; 
   Status_OFF := FALSE; 
   Error := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   Analog_Set_Value := W#16#0; 
   FB_Analog := W#16#0; 
   Analog_Output := W#16#0; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   count := 0; 
END_DATA_BLOCK

DATA_BLOCK "DB_P-FS-04M"
TITLE =
VERSION : 0.1

"FB_Freq_Converters"
BEGIN
   Start_WinCC := FALSE; 
   Start_OP := FALSE; 
   Start_Button := FALSE; 
   Start_Reserve := FALSE; 
   Stop_WinCC := FALSE; 
   Stop_OP := FALSE; 
   Stop_Button := FALSE; 
   Stop_Reserve := FALSE; 
   Remote_Switch := FALSE; 
   Aux_Switch := FALSE; 
   Reset_Error := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_ON := FALSE; 
   Status_OFF := FALSE; 
   Error := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   Analog_Set_Value := W#16#0; 
   FB_Analog := W#16#0; 
   Analog_Output := W#16#0; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   count := 0; 
END_DATA_BLOCK

FUNCTION_BLOCK "FB_Freq_Converters_addDI"
TITLE =
VERSION : 0.1


VAR_INPUT
  Start_WinCC : BOOL ;	
  Start_OP : BOOL ;	
  Start_Button : BOOL ;	
  Start_Reserve : BOOL ;	
  Stop_WinCC : BOOL ;	
  Stop_OP : BOOL ;	
  Stop_Button : BOOL ;	
  Stop_Reserve : BOOL ;	
  Remote_Switch : BOOL ;	
  Aux_Switch : BOOL ;	
  Reset_ErrorFB : BOOL ;	
  Automatic_Switch : BOOL ;	
  Reset_ErrorQF : BOOL ;	
  Error_Time : INT ;	
END_VAR
VAR_OUTPUT
  Start : BOOL ;	
  Stop : BOOL ;	
  Status_ON : BOOL ;	
  Status_OFF : BOOL ;	
  ErrorFB : BOOL ;	
  Hold : BOOL ;	
  MT_mode : BOOL ;	
  Reset : BOOL ;	
  Simulation : BOOL ;	
  ErrorQF : BOOL ;	
  HmiError : BOOL ;	
END_VAR
VAR_IN_OUT
  Analog_Set_Value : WORD ;	
  FB_Analog : WORD ;	
  Analog_Output : WORD ;	
  Cycles : INT ;	
  On_Time : DINT ;	
  Off_Time : DINT ;	
END_VAR
VAR
  pulse : BOOL ;	
  Pulse_On_Time : BOOL ;	
  Pulse_Off_Time : BOOL ;	
  Pulse_cycles : BOOL ;	
  count : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =Feedback simulation

      A     #Simulation; 
      S     #Automatic_Switch; 
      A     #Simulation; 
      A     #Start; 
      AN    #Stop; 
      JNB   _011; 
      =     #Aux_Switch; 
_011: NOP   0; 
NETWORK
TITLE =Error of feedback

      A(    ; 
      A(    ; 
      A     #Start; 
      AN    #Aux_Switch; 
      O     ; 
      A     #Stop; 
      A     #Aux_Switch; 
      )     ; 
      A     "Voltage control".SV_MCC1; 
      A     "1sec"; 
      FP    #pulse; 
      JNB   _001; 
      L     #count; 
      L     1; 
      +I    ; 
      T     #count; 
      AN    OV; 
      SAVE  ; 
      CLR   ; 
_001: A     BR; 
      )     ; 
      A(    ; 
      L     #Error_Time; 
      L     #count; 
      ==I   ; 
      )     ; 
      JNB   _002; 
      L     0; 
      T     #count; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_002: A     BR; 
      S     #ErrorFB; 
NETWORK
TITLE =Error of circuit breker contact

      A(    ; 
      O     #Start_WinCC; 
      O     #Start_OP; 
      O     #Start_Button; 
      O     #Start; 
      )     ; 
      AN    #Automatic_Switch; 
      A     "Voltage control".SV_MCC1; 
      S     #ErrorQF; 
NETWORK
TITLE =Reset error of feedback

      A     #Reset_ErrorFB; 
      R     #ErrorFB; 
NETWORK
TITLE =Reset error of circuit breker contact

      A     #Reset_ErrorQF; 
      R     #ErrorQF; 
NETWORK
TITLE =Some errors presence

      O     #ErrorFB; 
      O     #ErrorQF; 
      =     #HmiError; 
NETWORK
TITLE =Reset counter

      A(    ; 
      A     #Start; 
      A     #Aux_Switch; 
      O     ; 
      A     #Stop; 
      AN    #Aux_Switch; 
      O     #ErrorFB; 
      O     #ErrorQF; 
      )     ; 
      JNB   _003; 
      L     0; 
      T     #count; 
_003: NOP   0; 
NETWORK
TITLE =Start drive

      A(    ; 
      O     #Start_WinCC; 
      O     #Start_OP; 
      O     #Start_Button; 
      )     ; 
      A     #Remote_Switch; 
      A     #Automatic_Switch; 
      AN    #Aux_Switch; 
      AN    #MT_mode; 
      JNB   _004; 
      CALL "Write Analog Value" (
           AI                       := #Analog_Set_Value,
           HighLevel                := 100,
           LowLevel                 := 0,
           AO                       := #Analog_Output,
           Out_of_range             := "NULL");
_004: A     BR; 
      S     #Start; 
      R     #Stop; 
NETWORK
TITLE =Stop drive

      A(    ; 
      A(    ; 
      O     #Stop_WinCC; 
      O     #Stop_OP; 
      O     #Stop_Button; 
      )     ; 
      A     #Remote_Switch; 
      A     #Automatic_Switch; 
      A     #Aux_Switch; 
      O     ; 
      AN    #Remote_Switch; 
      A     #Aux_Switch; 
      O     #ErrorFB; 
      O     #ErrorQF; 
      )     ; 
      AN    #MT_mode; 
      JNB   _005; 
      CALL "Write Analog Value" (
           AI                       := W#16#0,
           HighLevel                := 100,
           LowLevel                 := 0,
           AO                       := #Analog_Output,
           Out_of_range             := "NULL");
_005: A     BR; 
      S     #Stop; 
      R     #Start; 
NETWORK
TITLE =Simulation feedback

      L     #Analog_Set_Value; 
      T     #FB_Analog; 

NETWORK
TITLE =Transfer analog value



      A     #Start; 
      A     #Remote_Switch; 
      A     #Automatic_Switch; 
      A     #Aux_Switch; 
      AN    #ErrorFB; 
      AN    #ErrorQF; 
      AN    #MT_mode; 
      JNB   _006; 
      CALL "Write Analog Value" (
           AI                       := #Analog_Set_Value,
           HighLevel                := 100,
           LowLevel                 := 0,
           AO                       := #Analog_Output,
           Out_of_range             := "NULL");
_006: NOP   0; 
NETWORK
TITLE =Set statuses

      A     #Remote_Switch; 
      A     #Automatic_Switch; 
      A     #Aux_Switch; 
      AN    #ErrorFB; 
      AN    #ErrorQF; 
      =     #Status_ON; 

//     A     #Remote_Switch
      AN    #Aux_Switch; 
      AN    #ErrorFB; 
      AN    #ErrorQF; 
      =     #Status_OFF; 


NETWORK
TITLE =Calculation time of working and staying

// On_Time counting
      A     #Status_ON; 
      AN    #MT_mode; 
      A     "1sec"; 
      FP    #Pulse_On_Time; 
      JNB   _007; 
      L     #On_Time; 
      L     1; //1 sec
      +D    ; 
      T     #On_Time; 
_007: NOP   0; 

// Off_Time counting
      A     #Status_OFF; 
      AN    #MT_mode; 
      A     "1sec"; 
      FP    #Pulse_Off_Time; 
      JNB   _008; 
      L     #Off_Time; 
      L     1; //1 sec
      +D    ; 
      T     #Off_Time; 
_008: NOP   0; 

//Cycles counting
      A     #Status_ON; 
      FP    #Pulse_cycles; 
      JNB   _009; 
      L     #Cycles; 
      L     1; 
      +I    ; 
      T     #Cycles; 
_009: NOP   0; 

//Reset counting
      A     #Reset; 
      JNB   _010; 
      L     0; 
      T     #On_Time; 
      T     #Off_Time; 
      L     0; 
      T     #Cycles; 
      R     #Reset; 
_010: NOP   0; 
NETWORK
TITLE =Reset buttons
//
//
      A     #Start_WinCC; 
      R     #Start_WinCC; 

      A     #Start_OP; 
      R     #Start_OP; 

      A     #Stop_WinCC; 
      R     #Stop_WinCC; 

      A     #Stop_OP; 
      R     #Stop_OP; 

      A     #Reset_ErrorFB; 
      R     #Reset_ErrorFB; 

      A     #Reset_ErrorQF; 
      R     #Reset_ErrorQF; 

END_FUNCTION_BLOCK

DATA_BLOCK "DB_P-FS-10M"
TITLE =
VERSION : 0.1

"FB_Freq_Converters_addDI"
BEGIN
   Start_WinCC := FALSE; 
   Start_OP := FALSE; 
   Start_Button := FALSE; 
   Start_Reserve := FALSE; 
   Stop_WinCC := FALSE; 
   Stop_OP := FALSE; 
   Stop_Button := FALSE; 
   Stop_Reserve := FALSE; 
   Remote_Switch := FALSE; 
   Aux_Switch := FALSE; 
   Reset_ErrorFB := FALSE; 
   Automatic_Switch := FALSE; 
   Reset_ErrorQF := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_ON := FALSE; 
   Status_OFF := FALSE; 
   ErrorFB := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   ErrorQF := FALSE; 
   HmiError := FALSE; 
   Analog_Set_Value := W#16#0; 
   FB_Analog := W#16#0; 
   Analog_Output := W#16#0; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   count := 0; 
END_DATA_BLOCK

DATA_BLOCK "DB_A-FS-30M"
TITLE =
VERSION : 0.1

"FB_Freq_Converters_addDI"
BEGIN
   Start_WinCC := FALSE; 
   Start_OP := FALSE; 
   Start_Button := FALSE; 
   Start_Reserve := FALSE; 
   Stop_WinCC := FALSE; 
   Stop_OP := FALSE; 
   Stop_Button := FALSE; 
   Stop_Reserve := FALSE; 
   Remote_Switch := FALSE; 
   Aux_Switch := FALSE; 
   Reset_ErrorFB := FALSE; 
   Automatic_Switch := FALSE; 
   Reset_ErrorQF := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_ON := FALSE; 
   Status_OFF := FALSE; 
   ErrorFB := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   ErrorQF := FALSE; 
   HmiError := FALSE; 
   Analog_Set_Value := W#16#0; 
   FB_Analog := W#16#0; 
   Analog_Output := W#16#0; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   count := 0; 
END_DATA_BLOCK

FUNCTION_BLOCK "FB_3way_Valves"
TITLE =
VERSION : 0.1


VAR_INPUT
  Open_WinCC : BOOL ;	
  Open_OP : BOOL ;	
  Open_Button : BOOL ;	
  Open_Reserve : BOOL ;	
  Close_WinCC : BOOL ;	
  Close_OP : BOOL ;	
  Close_Button : BOOL ;	
  Close_Reserve : BOOL ;	
  SQ_Open : BOOL ;	
  SQ_Close : BOOL ;	
  Reset_Error : BOOL ;	
  Error_Time : INT ;	
END_VAR
VAR_OUTPUT
  Start : BOOL ;	
  Stop : BOOL ;	
  Status_Open : BOOL ;	
  Status_Close : BOOL ;	
  Error : BOOL ;	
  Hold : BOOL ;	
  MT_mode : BOOL ;	
  Reset : BOOL ;	
  Simulation : BOOL ;	
  Cycles : INT ;	
  On_Time : DINT ;	
  Off_Time : DINT ;	
END_VAR
VAR
  Pulse : BOOL ;	
  Pulse_On_Time : BOOL ;	
  Pulse_Off_Time : BOOL ;	
  Pulse_cycles : BOOL ;	
  Count : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =Feedback simulation

      A     #Simulation; 
      A     #Start; 
      AN    #Stop; 
      JNB   _008; 
      =     #SQ_Open; 
      CLR   ; 
      =     #SQ_Close; 
_008: NOP   0; 

      A     #Simulation; 
      AN    #Start; 
      A     #Stop; 
      JNB   _009; 
      =     #SQ_Close; 
      CLR   ; 
      =     #SQ_Open; 
_009: NOP   0; 
NETWORK
TITLE =Error message setting

      A(    ; 
      A(    ; 
      A     #Start; 
      AN    #SQ_Open; 
      O     ; 
      A     #Stop; 
      AN    #SQ_Close; 
      O     ; 
      A     #SQ_Open; 
      A     #SQ_Close; 
      O     ; 
      AN    #SQ_Open; 
      AN    #SQ_Close; 
      )     ; 
      A     "Voltage control".SV_MCC1; 
      A     "1sec"; 
      FP    #Pulse; 
      JNB   _001; 
      L     #Count; 
      L     1; 
      +I    ; 
      T     #Count; 
      AN    OV; 
      SAVE  ; 
      CLR   ; 
_001: A     BR; 
      )     ; 
      A(    ; 
      L     #Error_Time; 
      L     #Count; 
      ==I   ; 
      )     ; 
      JNB   _002; 
      L     0; 
      T     #Count; 
      SET   ; 
      SAVE  ; 
      CLR   ; 
_002: A     BR; 
      S     #Error; 
NETWORK
TITLE =Reset error message

      A     #Reset_Error; 
      R     #Error; 
NETWORK
TITLE =Reset counter

      A(    ; 
      A     #Start; 
      A     #SQ_Open; 
      AN    #SQ_Close; 
      O     ; 
      A     #Stop; 
      AN    #SQ_Open; 
      A     #SQ_Close; 
      O     #Error; 
      )     ; 
      JNB   _003; 
      L     0; 
      T     #Count; 
_003: NOP   0; 
NETWORK
TITLE =Open valve

      A(    ; 
      O     #Open_WinCC; 
      O     #Open_OP; 
      O     #Open_Button; 
      )     ; 
      AN    #SQ_Open; 
      AN    #MT_mode; 
      S     #Start; 
      R     #Stop; 
NETWORK
TITLE =Close Valve

      A(    ; 
      A(    ; 
      O     #Close_WinCC; 
      O     #Close_OP; 
      O     #Close_Button; 
      )     ; 
      AN    #SQ_Close; 
      O     #Error; 


      )     ; 
      AN    #MT_mode; 
      S     #Stop; 
      R     #Start; 
NETWORK
TITLE =Status setting


      A     #SQ_Open; 
      AN    #SQ_Close; 
      AN    #Error; 
      =     #Status_Open; 

      AN    #SQ_Open; 
      A     #SQ_Close; 
      AN    #Error; 
      =     #Status_Close; 


NETWORK
TITLE =Time & Cycles Counting

// On_Time counting
      A     #Status_Open; 
      AN    #MT_mode; 
      A     "1sec"; 
      FP    #Pulse_On_Time; 
      JNB   _004; 
      L     #On_Time; 
      L     1; //1 sec
      +D    ; 
      T     #On_Time; 
_004: NOP   0; 

// Off_Time counting
      A     #Status_Close; 
      AN    #MT_mode; 
      A     "1sec"; 
      FP    #Pulse_Off_Time; 
      JNB   _005; 
      L     #Off_Time; 
      L     1; //1 sec
      +D    ; 
      T     #Off_Time; 
_005: NOP   0; 

//Cycles counting
      A     #Status_Open; 
      FP    #Pulse_cycles; 
      JNB   _006; 
      L     #Cycles; 
      L     1; 
      +I    ; 
      T     #Cycles; 
_006: NOP   0; 

//Reset counting
      A     #Reset; 
      JNB   _007; 
      L     0; 
      T     #On_Time; 
      T     #Off_Time; 
      L     0; 
      T     #Cycles; 
      R     #Reset; 
_007: NOP   0; 
NETWORK
TITLE =Reset buttons
//
//
      A     #Open_WinCC; 
      R     #Open_WinCC; 

      A     #Open_OP; 
      R     #Open_OP; 

      A     #Close_WinCC; 
      R     #Close_WinCC; 

      A     #Close_OP; 
      R     #Close_OP; 

      A     #Reset_Error; 
      R     #Reset_Error; 



END_FUNCTION_BLOCK

DATA_BLOCK "DB_H-FS-52"
TITLE =
VERSION : 0.1

"FB_3way_Valves"
BEGIN
   Open_WinCC := FALSE; 
   Open_OP := FALSE; 
   Open_Button := FALSE; 
   Open_Reserve := FALSE; 
   Close_WinCC := FALSE; 
   Close_OP := FALSE; 
   Close_Button := FALSE; 
   Close_Reserve := FALSE; 
   SQ_Open := FALSE; 
   SQ_Close := FALSE; 
   Reset_Error := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_Open := FALSE; 
   Status_Close := FALSE; 
   Error := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   Pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   Count := 0; 
END_DATA_BLOCK

DATA_BLOCK "DB_H-FS-49"
TITLE =
VERSION : 0.1

"FB_3way_Valves"
BEGIN
   Open_WinCC := FALSE; 
   Open_OP := FALSE; 
   Open_Button := FALSE; 
   Open_Reserve := FALSE; 
   Close_WinCC := FALSE; 
   Close_OP := FALSE; 
   Close_Button := FALSE; 
   Close_Reserve := FALSE; 
   SQ_Open := FALSE; 
   SQ_Close := FALSE; 
   Reset_Error := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_Open := FALSE; 
   Status_Close := FALSE; 
   Error := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   Pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   Count := 0; 
END_DATA_BLOCK

DATA_BLOCK "DB_H-FS-50"
TITLE =
VERSION : 0.1

"FB_3way_Valves"
BEGIN
   Open_WinCC := FALSE; 
   Open_OP := FALSE; 
   Open_Button := FALSE; 
   Open_Reserve := FALSE; 
   Close_WinCC := FALSE; 
   Close_OP := FALSE; 
   Close_Button := FALSE; 
   Close_Reserve := FALSE; 
   SQ_Open := FALSE; 
   SQ_Close := FALSE; 
   Reset_Error := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_Open := FALSE; 
   Status_Close := FALSE; 
   Error := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   Pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   Count := 0; 
END_DATA_BLOCK

DATA_BLOCK "DB_H-FS-51"
TITLE =
VERSION : 0.1

"FB_3way_Valves"
BEGIN
   Open_WinCC := FALSE; 
   Open_OP := FALSE; 
   Open_Button := FALSE; 
   Open_Reserve := FALSE; 
   Close_WinCC := FALSE; 
   Close_OP := FALSE; 
   Close_Button := FALSE; 
   Close_Reserve := FALSE; 
   SQ_Open := FALSE; 
   SQ_Close := FALSE; 
   Reset_Error := FALSE; 
   Error_Time := 0; 
   Start := FALSE; 
   Stop := FALSE; 
   Status_Open := FALSE; 
   Status_Close := FALSE; 
   Error := FALSE; 
   Hold := FALSE; 
   MT_mode := FALSE; 
   Reset := FALSE; 
   Simulation := FALSE; 
   Cycles := 0; 
   On_Time := L#0; 
   Off_Time := L#0; 
   Pulse := FALSE; 
   Pulse_On_Time := FALSE; 
   Pulse_Off_Time := FALSE; 
   Pulse_cycles := FALSE; 
   Count := 0; 
END_DATA_BLOCK

FUNCTION_BLOCK "FB_Analog_Weight"
TITLE =
VERSION : 0.1


VAR_INPUT
  Overflow : BOOL ;	
  Wirebreak : BOOL ;	
  Analog_Input : REAL ;	
END_VAR
VAR_OUTPUT
  Analog_Output : REAL ;	
END_VAR
VAR
  Simulation : BOOL ;	
  SimValue : REAL ;	
END_VAR
BEGIN
NETWORK
TITLE =

//Simulation
      A     #Simulation; 
      JNB   _010; 
      L     #SimValue; 
      T     #Analog_Output; 
      JU    _004; 
_010: NOP   0; 

//new line
      L     #Analog_Input; 
      T     #Analog_Output; 
_004: NOP   0; 

END_FUNCTION_BLOCK

DATA_BLOCK "DB_TenzoM"
TITLE =
VERSION : 0.1

"FB_Analog_Weight"
BEGIN
   Overflow := FALSE; 
   Wirebreak := FALSE; 
   Analog_Input := 0.000000e+000; 
   Analog_Output := 0.000000e+000; 
   Simulation := FALSE; 
   SimValue := 0.000000e+000; 
END_DATA_BLOCK

FUNCTION "TIM_S5TI" : S5TIME
TITLE = IEC Time to S5 Time
AUTHOR : SIMATIC
FAMILY : IEC
NAME : TIM_S5TI
STANDARD
VERSION : 1.2


VAR_INPUT
  IN : TIME ;	// T#hh:mm:ss.sss 
END_VAR
VAR_TEMP
  y_Base : BYTE ;	// Zeitbasis
  d_Temp : DWORD ;	
END_VAR
BEGIN
NETWORK
TITLE =

      SET   ; 
      SAVE  ; // BIE setzen
      L     0; // Zeitbasis löschen
      T     #y_Base; 
      L     #IN; 
      T     #d_Temp; 
      L     0; // Zeitwert negativ
      <D    ; // ja, dann S5_Time := 0
      JC    FEHL; 
      TAK   ; 
      L     L#9990000; // Zeitwert > als erlaubt
      <=D   ; 
      JC    LOP; 
      L     W#16#3999; // ja, S5_Time := 3.999
      JC    FEHL; 
LOP:  L     #d_Temp; // Zeit
      L     L#10; 
      /D    ; // Zeit : 10	
      T     #d_Temp; 
      L     L#999; // Ergebnis : > 999
      <=D   ; 
      JC    FERT; // ja, dann Basis + 1
      L     #y_Base; 
      INC   1; 
      T     #y_Base; 
      JU    LOP; 
FERT: TAK   ; // Zeitwert holen
      DTB   ; // Wandlung BCD
      L     #y_Base; // Basis einblenden
      SLW   12; 
      OW    ; 
      JU    RET; 
FEHL: CLR   ; // BIE := 0
      SAVE  ; 
RET:  T     #RET_VAL; 
      BE    ; 
END_FUNCTION

FUNCTION "Fuel phase" : VOID
TITLE =
VERSION : 0.1


VAR_TEMP
  tempIdling_time : TIME ;	
  tempIdling_s5time : S5TIME ;	
  tempRet : INT ;	
  tempPointer : ANY ;	
END_VAR
BEGIN
NETWORK
TITLE = Errors and interlocks

//Reset errors
//Pour down previous batch
      A     DB24.DBX   86.0; 
      JNB   _250; 
      R     DB24.DBX   44.0; 
      R     DB24.DBX   86.0; 

//Idling of DB_P-FS-10M
_250: A     DB24.DBX   86.1; 
      JNB   _251; 
      R     DB24.DBX   44.1; 
      R     DB24.DBX   86.1; 

//Overflow IBC
_251: A     DB24.DBX   86.2; 
      JNB   _252; 
      R     DB24.DBX   44.2; 
      R     DB24.DBX   86.2; 

//Overflow B-FS-09
_252: A     DB24.DBX   86.3; 
      JNB   _253; 
      R     DB24.DBX   44.3; 
      R     DB24.DBX   86.3; 

//Emergency stop A-FS-30M
_253: A     DB24.DBX   86.4; 
      JNB   _254; 
      R     DB24.DBX   44.4; 
      R     DB24.DBX   86.4; 

//Emergency stop
_254: A     DB24.DBX   86.5; 
      JNB   _255; 
      R     DB24.DBX   44.5; 
      R     DB24.DBX   86.5; 

//Both pumps are busy P-FS-03M and P-FS-04M
_255: A     DB24.DBX   86.6; 
      JNB   _256; 
      R     DB24.DBX   44.6; 
      R     DB24.DBX   86.6; 

//Manual process is started
_256: A     DB24.DBX   86.7; 
      JNB   _257; 
      R     DB24.DBX   44.7; 
      R     DB24.DBX   86.7; 

//Incorrect parametres of recipe
_257: A     DB24.DBX   87.0; 
      JNB   _258; 
      R     DB24.DBX   68.1; 
      R     DB24.DBX   87.0; 

_258: NOP   0; 


//Setting of error's flags
//Pour down previous batch
      A     DB24.DBX   70.0; 
      JNB   _200; 
      A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Weight_control; 
      >R    ; 
      )     ; 
      AN    "Fuel Phase Block".Program_interrupt; 
      S     DB24.DBX   44.0; 
      A     DB24.DBX   44.0; 
      R     DB24.DBX   70.0; 

//Idling of DB_P-FS-10M
_200: A     T     29; 
      R     T     29; 
      S     DB24.DBX   44.1; 

      A     DB24.DBX   44.1; 
      JNB   _213; 

      A     "DB_P-FS-10M".Status_ON; 
      =     "DB_P-FS-10M".Stop_WinCC; 

      A     "DB_A-FS-30M".Status_ON; 
      =     "DB_A-FS-30M".Stop_WinCC; 

      A     "Fuel Phase Block".Emuls1_start; 
      R     "Fuel Phase Block".Emuls1_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".Emuls2_start; 
      R     "Fuel Phase Block".Emuls2_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".Status_start; 
      R     "Fuel Phase Block".Status_start; 
      S     "Fuel Phase Block".Program_interrupt; 

      A     "Fuel Phase Block".Mixer_start; 
      R     "Fuel Phase Block".Mixer_start; 

_213: L     "Fuel Phase Block".Idling_time; 
      L     L#1000; 
      *D    ; 
      T     #tempIdling_time; 

      CALL "TIM_S5TI" (
           IN                       := #tempIdling_time,
           RET_VAL                  := #tempIdling_s5time);

      A(    ; 
      A     "Fuel Phase Block".Status_start; 
      O     "Fuel Phase Block".Emuls1_start; 
      O     "Fuel Phase Block".Emuls2_start; 
      )     ; 
      A     "DB_P-FS-10M".Status_ON; 
      A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Idling_control; 
      ==R   ; 
      )     ; 

      L     #tempIdling_s5time; 
      SD    T     29; 

      L     "DB_TenzoM".Analog_Output; 
      T     "Fuel Phase Block".Idling_control; 


//Overflow IBC
      A(    ; 
      L     "Fuel Phase Block".IBC_setpoint; 
      L     "Fuel Phase Block".IBC_setpoint_HL; 
      >=R   ; 
      )     ; 
      JNB   _201; 
      L     "Fuel Phase Block".IBC_setpoint_HL; 
      T     "Fuel Phase Block".IBC_setpoint; 

_201: A(    ; 
      A     "Fuel Phase Block".IBC_start; 
      O     "Fuel Phase Block".IBC_start_auto; 
      )     ; 
      A     "DB_H-FS-52".Status_Open; 
      JNB   _203; 

      A(    ; 
      L     "Fuel Phase Block".IBC_start_value; 
      L     0; 
      ==R   ; 
      )     ; 
      JNB   _204; 

      L     "DB_TenzoM".Analog_Output; 
      T     "Fuel Phase Block".IBC_start_value; 

_204: A(    ; 
      L     "Fuel Phase Block".IBC_start_value; 
      L     "DB_TenzoM".Analog_Output; 
      -R    ; 
      L     "Fuel Phase Block".IBC_setpoint; 
      >=R   ; 
      )     ; 
      =     "DB_P-FS-02M".Stop_WinCC; 
      S     DB24.DBX   44.2; 
      R     "Fuel Phase Block".IBC_start; 
      R     "Fuel Phase Block".IBC_start_auto; 
      R     "Fuel Phase Block".Process_busy; 
      JU    _205; 

_203: L     0; 
      T     "Fuel Phase Block".IBC_start_value; 


//Overflow B-FS-09
_205: A(    ; 
      L     "Fuel Phase Block".Max_value; 
      L     "Fuel Phase Block".Max_value_HL; 
      >=R   ; 
      )     ; 
      JNB   _202; 
      L     "Fuel Phase Block".Max_value_HL; 
      T     "Fuel Phase Block".Max_value; 

_202: A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Max_value; 
      >=R   ; 
      )     ; 
      JNB   _206; 
      S     DB24.DBX   44.3; 

      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      =     "DB_P-FS-03M".Stop_WinCC; 

      A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      =     "DB_P-FS-04M".Stop_WinCC; 

      A     "DB_P-FS-10M".Status_ON; 
      =     "DB_P-FS-10M".Stop_WinCC; 

      A     "DB_A-FS-30M".Status_ON; 
      =     "DB_A-FS-30M".Stop_WinCC; 

      A     "Fuel Phase Block".Minoil_start; 
      R     "Fuel Phase Block".Minoil_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".Emuls1_start; 
      R     "Fuel Phase Block".Emuls1_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".Emuls2_start; 
      R     "Fuel Phase Block".Emuls2_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".Status_start; 
      R     "Fuel Phase Block".Status_start; 



//Warning overflow B-FS-09
_206: A(    ; 
      L     "Fuel Phase Block".Max_value_limit; 
      L     1.000000e+002; 
      >R    ; 
      )     ; 
      JNB   _212; 
      L     1.000000e+002; 
      T     "Fuel Phase Block".Max_value_limit; 

_212: A(    ; 
      L     "Fuel Phase Block".Max_value; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Max_value_limit; 
      *R    ; 
      L     "DB_TenzoM".Analog_Output; 
      <=R   ; 
      )     ; 
      =     DB24.DBX   68.0; 


//Emergency stop of mixer A-FS-30M
      AN    "Fuel Phase Block".Mixer_ES; 
      JNB   _207; 
      R     "Fuel Phase Block".Mixer_start; 
      S     DB24.DBX   44.4; 


//Emergency stop
_207: A     "Emergency Blocks".HS_EZ_07; 
      O     "Emergency Blocks".HS_EZ_01; 
      =     DB24.DBX   44.5; 

      A     DB24.DBX   44.5; 
      JNB   _208; 
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      =     "DB_P-FS-03M".Stop_WinCC; 

      A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      =     "DB_P-FS-04M".Stop_WinCC; 

      A     "DB_P-FS-10M".Status_ON; 
      =     "DB_P-FS-10M".Stop_WinCC; 

      A     "DB_A-FS-30M".Status_ON; 
      =     "DB_A-FS-30M".Stop_WinCC; 

      A     "DB_P-FS-02M".Status_ON; 
      =     "DB_P-FS-02M".Stop_WinCC; 

      A     "Fuel Phase Block".Minoil_start; 
      R     "Fuel Phase Block".Minoil_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".Emuls1_start; 
      R     "Fuel Phase Block".Emuls1_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".Emuls2_start; 
      R     "Fuel Phase Block".Emuls2_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".IBC_start; 
      R     "Fuel Phase Block".IBC_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".IBC_start_auto; 
      R     "Fuel Phase Block".IBC_start_auto; 

      A     "Fuel Phase Block".Mixer_start; 
      R     "Fuel Phase Block".Mixer_start; 

      A     "Fuel Phase Block".Status_start; 
      R     "Fuel Phase Block".Status_start; 
      S     "Fuel Phase Block".Program_interrupt; 



//Both pumps are busy P-FS-03M and P-FS-04M
_208: A(    ; 
      A     DB24.DBX   70.0; 
      O     DB24.DBX   70.4; 
      )     ; 
      JNB   _209; 
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_P-FS-04M".Status_ON; 
      S     DB24.DBX   44.6; 
      R     DB24.DBX   70.0; 
      R     DB24.DBX   70.4; 

//Manual process is started
_209: A     DB24.DBX   70.0; 
      JNB   _210; 
      A     "Fuel Phase Block".Process_busy; 
      S     DB24.DBX   44.7; 
      R     DB24.DBX   70.0; 

//Incorrect parametres of recipe          
_210: A(    ; 
      O     DB24.DBX   70.0; 
      O     DB24.DBX   71.7; 
      )     ; 
      JNB   _211; 
      A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_capacity; 
      L     "Fuel Phase Block".Recipe.emuls1_capacity; 
      +R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_capacity; 
      +R    ; 
      L     1.000000e+002; 
      <>R   ; 
      )     ; 
      O(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      +R    ; 
      L     "Fuel Phase Block".Max_value; 
      >=R   ; 
      )     ; 
      O(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     0.000000e+000; 
      ==R   ; 
      )     ; 
      O(    ; 
      L     "Fuel Phase Block".Current_id; 
      L     20; 
      >I    ; 
      )     ; 
      JNB   _211; 
      S     DB24.DBX   68.1; 
      A     DB24.DBX   70.0; 
      R     DB24.DBX   70.0; 
      A     DB24.DBX   71.7; 
      R     DB24.DBX   71.7; 

//Incorrect parametres of recipe
_211: A     DB24.DBX   71.6; 
      JNB   _214; 
      A(    ; 
      L     "Fuel Phase Block".Current_id; 
      L     20; 
      >I    ; 
      )     ; 
      JNB   _214; 
      S     DB24.DBX   68.1; 
      R     DB24.DBX   71.6; 

//Interlocks are in process P-FS-03M or P-FS-04M
_214: A     "Interlocks".Interlock_95_1; 
      O     "Interlocks".Interlock_95_2; 
      O     "Interlocks".Interlock_52_2; 
      O     "Interlocks".Interlock_53_1; 
      JNB   _215; 
      A     "Fuel Phase Block".Status_start; 
      R     "Fuel Phase Block".Status_start; 
      S     "Fuel Phase Block".Program_interrupt; 

      A     "DB_A-FS-30M".Status_ON; 
      AN    "Fuel Phase Block".Mixer_start; 
      S     "DB_A-FS-30M".Stop_WinCC; 

      A     "Fuel Phase Block".Minoil_start; 
      R     "Fuel Phase Block".Minoil_start; 
      R     "Fuel Phase Block".Process_busy; 

//Interlock is in process P-FS-02M
_215: A     "Interlocks".Interlock_63_1; 
      JNB   _216; 
      A     "Fuel Phase Block".IBC_start; 
      R     "Fuel Phase Block".IBC_start; 
      R     "Fuel Phase Block".Process_busy; 

      A     "Fuel Phase Block".IBC_start_auto; 
      R     "Fuel Phase Block".IBC_start_auto; 

_216: NOP   0; 





NETWORK
TITLE = Calculation of recipe

//Calculation of recipe's parametres
//Check-up is programm in auto mode
      AN    "Fuel Phase Block".Status_start; 
      JNB   _309; 

//Check-up is common weight not equal to 0
      A(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     0.000000e+000; 
      <>R   ; 
      )     ; 
      JNB   _300; 

//Check-up compliance min. oil amount and capacity
      A(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.minoil_capacity; 
      *R    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      ==R   ; 
      )     ; 
      JNB   _301; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      T     "Fuel Phase Block".minoil_balance_value; 
      JU    _303; 

//Transfer kg to % min. oil if amount is changed
_301: A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".minoil_balance_value; 
      <>R   ; 
      )     ; 
      JNB   _302; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     1.000000e+002; 
      *R    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      /R    ; 
      T     "Fuel Phase Block".Recipe.minoil_capacity; 
      JU    _303; 

//Transfer % to kg min. oil if capacity is changed
_302: A(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.minoil_capacity; 
      *R    ; 
      L     "Fuel Phase Block".minoil_balance_value; 
      <>R   ; 
      )     ; 
      JNB   _303; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.minoil_capacity; 
      *R    ; 
      T     "Fuel Phase Block".Recipe.minoil_amount; 

//Check-up compliance emulgator1 amount and capacity
_303: A(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.emuls1_capacity; 
      *R    ; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      ==R   ; 
      )     ; 
      JNB   _304; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      T     "Fuel Phase Block".emuls1_balance_value; 
      JU    _306; 

//Transfer kg to % emulgator1 if amount is changed
_304: A(    ; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      L     "Fuel Phase Block".emuls1_balance_value; 
      <>R   ; 
      )     ; 
      JNB   _305; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      L     1.000000e+002; 
      *R    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      /R    ; 
      T     "Fuel Phase Block".Recipe.emuls1_capacity; 
      JU    _306; 

//Transfer % to kg emulgator1 if capacity is changed
_305: A(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.emuls1_capacity; 
      *R    ; 
      L     "Fuel Phase Block".emuls1_balance_value; 
      <>R   ; 
      )     ; 
      JNB   _306; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.emuls1_capacity; 
      *R    ; 
      T     "Fuel Phase Block".Recipe.emuls1_amount; 

//Check-up compliance emulgator2 amount and capacity
_306: A(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_capacity; 
      *R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      ==R   ; 
      )     ; 
      JNB   _307; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      T     "Fuel Phase Block".emuls2_balance_value; 
      JU    _309; 

//Transfer kg to % emulgator2 if amount is changed
_307: A(    ; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      L     "Fuel Phase Block".emuls2_balance_value; 
      <>R   ; 
      )     ; 
      JNB   _308; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      L     1.000000e+002; 
      *R    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      /R    ; 
      T     "Fuel Phase Block".Recipe.emuls2_capacity; 
      JU    _309; 

//Transfer % to kg emulgator2 if capacity is changed
_308: A(    ; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_capacity; 
      *R    ; 
      L     "Fuel Phase Block".emuls2_balance_value; 
      <>R   ; 
      )     ; 
      JNB   _309; 
      L     "Fuel Phase Block".Recipe.weight; 
      L     1.000000e+002; 
      /R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_capacity; 
      *R    ; 
      T     "Fuel Phase Block".Recipe.emuls2_amount; 
      JU    _309; 

//Reset parametres of min. oil
_300: A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     0.000000e+000; 
      <>R   ; 
      )     ; 
      JNB   _310; 
      L     0.000000e+000; 
      T     "Fuel Phase Block".Recipe.minoil_amount; 
      T     "Fuel Phase Block".Recipe.minoil_capacity; 

//Reset parametres of emulgator1
_310: A(    ; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      L     0.000000e+000; 
      <>R   ; 
      )     ; 
      JNB   _311; 
      L     0.000000e+000; 
      T     "Fuel Phase Block".Recipe.emuls1_amount; 
      T     "Fuel Phase Block".Recipe.emuls1_capacity; 

//Reset parametres of emulgator2
_311: A(    ; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      L     0.000000e+000; 
      <>R   ; 
      )     ; 
      JNB   _312; 
      L     0.000000e+000; 
      T     "Fuel Phase Block".Recipe.emuls2_amount; 
      T     "Fuel Phase Block".Recipe.emuls2_capacity; 

_312: A(    ; 
      L     "Fuel Phase Block".minoil_balance_value; 
      L     "Fuel Phase Block".emuls1_balance_value; 
      +R    ; 
      L     "Fuel Phase Block".emuls2_balance_value; 
      +R    ; 
      L     0.000000e+000; 
      <>R   ; 
      )     ; 
      JNB   _309; 
      L     0.000000e+000; 
      T     "Fuel Phase Block".minoil_balance_value; 
      T     "Fuel Phase Block".emuls1_balance_value; 
      T     "Fuel Phase Block".emuls2_balance_value; 

_309: NOP   0; 





//Output actual values
//Common weight (kg)
      L     "DB_TenzoM".Analog_Output; 
      T     "Fuel Phase Block".Common_amount_current; 

//Min. oil (kg)
      A(    ; 
      A     "Fuel Phase Block".Status_start; 
      O     "Fuel Phase Block".Status_stop; 
      )     ; 
      A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      <R    ; 
      )     ; 
      O     "Fuel Phase Block".Minoil_start; 
      O     "Fuel Phase Block".Minoil_stop; 
      JNB   _500; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Previous_weight; 
      -R    ; 
      L     "Fuel Phase Block".Minoil_amount_current; 
      +R    ; 
      T     "Fuel Phase Block".Minoil_amount_current; 

//Emulgator1 (kg)
_500: A(    ; 
      A     "Fuel Phase Block".Status_start; 
      O     "Fuel Phase Block".Status_stop; 
      )     ; 
      A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "DB_TenzoM".Analog_Output; 
      >R    ; 
      )     ; 
      A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      >=R   ; 
      )     ; 
      O     "Fuel Phase Block".Emuls1_start; 
      O     "Fuel Phase Block".Emuls1_stop; 
      JNB   _501; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Previous_weight; 
      -R    ; 
      L     "Fuel Phase Block".Emuls1_amount_current; 
      +R    ; 
      T     "Fuel Phase Block".Emuls1_amount_current; 

//Emulgator2 (kg)
_501: A(    ; 
      A     "Fuel Phase Block".Status_start; 
      O     "Fuel Phase Block".Status_stop; 
      )     ; 
      A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      +R    ; 
      L     "DB_TenzoM".Analog_Output; 
      >R    ; 
      )     ; 
      A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "DB_TenzoM".Analog_Output; 
      <=R   ; 
      )     ; 
      O     "Fuel Phase Block".Emuls2_start; 
      O     "Fuel Phase Block".Emuls2_stop; 
      JNB   _502; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Previous_weight; 
      -R    ; 
      L     "Fuel Phase Block".Emuls2_amount_current; 
      +R    ; 
      T     "Fuel Phase Block".Emuls2_amount_current; 


//Common wight (%)
_502: A(    ; 
      L     "Fuel Phase Block".Max_value; 
      L     0.000000e+000; 
      <>R   ; 
      )     ; 
      JNB   _503; 
      L     "Fuel Phase Block".Common_amount_current; 
      L     1.000000e+002; 
      *R    ; 
      L     "Fuel Phase Block".Max_value; 
      /R    ; 
      T     "Fuel Phase Block".Common_capacity_current; 
      JU    _504; 

_503: L     0.000000e+000; 
      T     "Fuel Phase Block".Common_capacity_current; 

//Min. oil (%)
_504: A(    ; 
      L     "Fuel Phase Block".Common_amount_current; 
      L     0.000000e+000; 
      <>R   ; 
      )     ; 
      JNB   _505; 
      L     "Fuel Phase Block".Minoil_amount_current; 
      L     1.000000e+002; 
      *R    ; 
      L     "Fuel Phase Block".Common_amount_current; 
      /R    ; 
      T     "Fuel Phase Block".Minoil_capacity_current; 

//Emulgator1 (%)
      L     "Fuel Phase Block".Emuls1_amount_current; 
      L     1.000000e+002; 
      *R    ; 
      L     "Fuel Phase Block".Common_amount_current; 
      /R    ; 
      T     "Fuel Phase Block".Emuls1_capacity_current; 

//Emulgator2 (%)
      L     "Fuel Phase Block".Emuls2_amount_current; 
      L     1.000000e+002; 
      *R    ; 
      L     "Fuel Phase Block".Common_amount_current; 
      /R    ; 
      T     "Fuel Phase Block".Emuls2_capacity_current; 
      JU    _506; 

_505: L     0.000000e+000; 
      T     "Fuel Phase Block".Minoil_capacity_current; 
      T     "Fuel Phase Block".Emuls1_capacity_current; 
      T     "Fuel Phase Block".Emuls2_capacity_current; 

//Reset values
_506: A     "Fuel Phase Block".IBC_start; 
      O     "Fuel Phase Block".IBC_start_auto; 
      O(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Weight_control; 
      <R    ; 
      )     ; 
      AN    "Fuel Phase Block".Status_start; 
      AN    "Fuel Phase Block".Minoil_start; 
      AN    "Fuel Phase Block".Emuls1_start; 
      AN    "Fuel Phase Block".Emuls2_start; 
      JNB   _507; 
      L     0.000000e+000; 
      T     "Fuel Phase Block".Minoil_amount_current; 
      T     "Fuel Phase Block".Emuls1_amount_current; 
      T     "Fuel Phase Block".Emuls2_amount_current; 

//Current cycle's value record
_507: L     "DB_TenzoM".Analog_Output; 
      T     "Fuel Phase Block".Previous_weight; 





NETWORK
TITLE = Producing fuel phase

//Start programm in auto mode
      A     DB24.DBX   70.0; 
      JNB   _000; 
      R     DB24.DBX   70.0; 
      AN    DB24.DBX   44.3; 
      AN    DB24.DBX   44.5; 
      AN    "Fuel Phase Block".Status_stop; 
      S     "Fuel Phase Block".Status_start; 

//Stop programm
_000: A     DB24.DBX   70.1; 
      JNB   _001; 
      R     "Fuel Phase Block".Status_start; 
      R     "Fuel Phase Block".Program_interrupt; 
      S     "Fuel Phase Block".Status_stop; 
      R     DB24.DBX   70.1; 

//FP is ready
_001: A     DB24.DBX   70.2; 
      JNB   _002; 
      R     DB24.DBX   70.2; 
      AN    "Fuel Phase Block".Status_start; 
      AN    "Fuel Phase Block".Process_busy; 
      S     "Fuel Phase Block".Status_ready; 

//FP isn't ready
_002: A     DB24.DBX   70.3; 
      JNB   _003; 
      R     "Fuel Phase Block".Status_ready; 
      R     DB24.DBX   70.3; 

//Downloading min. oil. Manual mode
_003: A     DB24.DBX   70.4; 
      JNB   _004; 
      R     DB24.DBX   70.4; 
      AN    "Fuel Phase Block".Process_busy; 
      AN    "Fuel Phase Block".Status_ready; 
      AN    "Fuel Phase Block".Status_start; 
      AN    "Fuel Phase Block".IBC_start_auto; 
      AN    DB24.DBX   44.3; 
      AN    DB24.DBX   44.5; 
      S     "Fuel Phase Block".Minoil_start; 

//Stop downloading min. oil. Manual mode
_004: A     DB24.DBX   70.5; 
      JNB   _005; 
      R     DB24.DBX   70.5; 
      A     "Fuel Phase Block".Minoil_start; 
      R     "Fuel Phase Block".Minoil_start; 
      S     "Fuel Phase Block".Minoil_stop; 

//Downloading emulgator1. Manual mode
_005: A     DB24.DBX   70.6; 
      JNB   _006; 
      R     DB24.DBX   70.6; 
      AN    "Fuel Phase Block".Process_busy; 
      AN    "Fuel Phase Block".Status_ready; 
      AN    "Fuel Phase Block".Status_start; 
      AN    "Fuel Phase Block".IBC_start_auto; 
      AN    DB24.DBX   44.3; 
      AN    DB24.DBX   44.5; 
      S     "Fuel Phase Block".Emuls1_start; 


//Stop downloading emulgator1. Manual mode
_006: A     DB24.DBX   70.7; 
      JNB   _007; 
      R     DB24.DBX   70.7; 
      A     "Fuel Phase Block".Emuls1_start; 
      R     "Fuel Phase Block".Emuls1_start; 
      S     "Fuel Phase Block".Emuls1_stop; 

//Downloading emulgator2. Manual mode
_007: A     DB24.DBX   71.0; 
      JNB   _008; 
      R     DB24.DBX   71.0; 
      AN    "Fuel Phase Block".Process_busy; 
      AN    "Fuel Phase Block".Status_ready; 
      AN    "Fuel Phase Block".Status_start; 
      AN    "Fuel Phase Block".IBC_start_auto; 
      AN    DB24.DBX   44.3; 
      AN    DB24.DBX   44.5; 
      S     "Fuel Phase Block".Emuls2_start; 

//Stop downloading emulgator2. Manual mode
_008: A     DB24.DBX   71.1; 
      JNB   _009; 
      R     DB24.DBX   71.1; 
      A     "Fuel Phase Block".Emuls2_start; 
      R     "Fuel Phase Block".Emuls2_start; 
      S     "Fuel Phase Block".Emuls2_stop; 

//Transfer to IBC. Manual mode
_009: A     DB24.DBX   71.2; 
      JNB   _010; 
      R     DB24.DBX   71.2; 
      AN    "Fuel Phase Block".Process_busy; 
      AN    "Fuel Phase Block".Status_start; 
      AN    "Fuel Phase Block".IBC_start_auto; 
      AN    DB24.DBX   44.2; 
      AN    DB24.DBX   44.5; 
      S     "Fuel Phase Block".IBC_start; 

//Stop transfer to IBC. Manual mode
_010: A     DB24.DBX   71.3; 
      JNB   _011; 
      R     DB24.DBX   71.3; 
      A     "Fuel Phase Block".IBC_start; 
      R     "Fuel Phase Block".IBC_start; 
      S     "Fuel Phase Block".IBC_stop; 

//Start mixer A-FS-30M. Manual mode
_011: A     DB24.DBX   71.4; 
      JNB   _012; 
      R     DB24.DBX   71.4; 
      AN    DB24.DBX   44.4; 
      AN    DB24.DBX   44.5; 
      S     "Fuel Phase Block".Mixer_start; 

//Stop mixer A-FS-30M. Manual mode
_012: A     DB24.DBX   71.5; 
      JNB   _013; 
      R     "Fuel Phase Block".Mixer_start; 
      S     "Fuel Phase Block".Mixer_stop; 
      R     DB24.DBX   71.5; 

//Download recipe   
_013: A     DB24.DBX   71.6; 
      JNB   _014; 

//Downloading recipe
      A(    ; 
      L     "Fuel Phase Block".Current_id; 
      L     0; 
      ==I   ; 
      )     ; 
      O     "Fuel Phase Block".Status_start; 
      O     "Fuel Phase Block".Status_stop; 
      R     DB24.DBX   71.6; 
      JC    _014; 
      L     "Fuel Phase Block".Current_id; 
      L     1; 
      -I    ; 
      L     464; 
      *I    ; 
      LAR1  ; 
      LAR2  P#4.0; 
      OPN   "Recipes Block"; 
      OPN   DI    24; 
//rec_id
      L     DBW [AR1,P#0.0]; 
      T     DIW [AR2,P#0.0]; 
//weight
      L     DBD [AR1,P#2.0]; 
      T     DID [AR2,P#2.0]; 
//minoil_amount
      L     DBD [AR1,P#6.0]; 
      T     DID [AR2,P#6.0]; 
//minoil_capacity
      L     DBD [AR1,P#10.0]; 
      T     DID [AR2,P#10.0]; 
//emuls1_amount
      L     DBD [AR1,P#14.0]; 
      T     DID [AR2,P#14.0]; 
//emuls1_capacity
      L     DBD [AR1,P#18.0]; 
      T     DID [AR2,P#18.0]; 
//emuls2_amount
      L     DBD [AR1,P#22.0]; 
      T     DID [AR2,P#22.0]; 
//emuls2_capacity
      L     DBD [AR1,P#26.0]; 
      T     DID [AR2,P#26.0]; 
//mixer_time
      L     DBD [AR1,P#30.0]; 
      T     DID [AR2,P#30.0]; 
//mixer_using
      L     DBW [AR1,P#34.0]; 
      T     DIW [AR2,P#34.0]; 

//Downloading name of recipe
//Type BYTE
      L     W#16#1002; 
      T     LW     8; 

//Number of bytes
      L     22; 
      T     LW    10; 

//Source DB
      L     713; 
      T     LW    12; 

//Source data
      TAR1  ; 
      L     P#DBX 36.0; 
      +D    ; 
      T     LD    14; 

      CALL "BLKMOV" (
           SRCBLK                   := #tempPointer,
           RET_VAL                  := #tempRet,
           DSTBLK                   := "Fuel Phase Block".rec_name);

      SET   ; 
      R     DB24.DBX   71.6; 

//Save recipe
_014: A     DB24.DBX   71.7; 
      JNB   _015; 

//Saving recipe
      A(    ; 
      L     "Fuel Phase Block".Current_id; 
      L     0; 
      ==I   ; 
      )     ; 
      O     "Fuel Phase Block".Status_start; 
      O     "Fuel Phase Block".Status_stop; 
      R     DB24.DBX   71.7; 
      JC    _015; 
      L     "Fuel Phase Block".Current_id; 
      T     "Fuel Phase Block".Recipe.rec_id; 
      L     "Fuel Phase Block".Current_id; 
      L     1; 
      -I    ; 
      L     464; 
      *I    ; 
      LAR2  ; 
      LAR1  P#4.0; 
      OPN   "Fuel Phase Block"; 
      OPN   DI   713; 
//rec_id
      L     DBW [AR1,P#0.0]; 
      T     DIW [AR2,P#0.0]; 
//weight
      L     DBD [AR1,P#2.0]; 
      T     DID [AR2,P#2.0]; 
//minoil_amount
      L     DBD [AR1,P#6.0]; 
      T     DID [AR2,P#6.0]; 
//minoil_capacity
      L     DBD [AR1,P#10.0]; 
      T     DID [AR2,P#10.0]; 
//emuls1_amount
      L     DBD [AR1,P#14.0]; 
      T     DID [AR2,P#14.0]; 
//emuls1_capacity
      L     DBD [AR1,P#18.0]; 
      T     DID [AR2,P#18.0]; 
//emuls2_amount
      L     DBD [AR1,P#22.0]; 
      T     DID [AR2,P#22.0]; 
//emuls2_capacity
      L     DBD [AR1,P#26.0]; 
      T     DID [AR2,P#26.0]; 
//mixer_time
      L     DBD [AR1,P#30.0]; 
      T     DID [AR2,P#30.0]; 
//mixer_using
      L     DBW [AR1,P#34.0]; 
      T     DIW [AR2,P#34.0]; 

//Saving name of recipe
//Type BYTE
      L     W#16#1002; 
      T     LW     8; 

//Number of bytes
      L     22; 
      T     LW    10; 

//Source DB
      L     713; 
      T     LW    12; 

//Source data
      TAR2  ; 
      L     P#DBX 36.0; 
      +D    ; 
      T     LD    14; 

      CALL "BLKMOV" (
           SRCBLK                   := "Fuel Phase Block".rec_name,
           RET_VAL                  := #tempRet,
           DSTBLK                   := #tempPointer);

      SET   ; 
      R     DB24.DBX   71.7; 

//Start transfer to IBC. Auto mode
_015: A     DB24.DBX   72.0; 
      JNB   _016; 
      R     DB24.DBX   72.0; 
      A     "Fuel Phase Block".Status_ready; 
      AN    "Fuel Phase Block".Process_busy; 
      AN    DB24.DBX   44.2; 
      AN    DB24.DBX   44.5; 
      =     "Fuel Phase Block".IBC_start_auto; 

//Stop transfer to IBC. Auto mode
_016: A     DB24.DBX   72.1; 
      JNB   _017; 
      R     DB24.DBX   72.1; 
      A     "Fuel Phase Block".IBC_start_auto; 
      R     "Fuel Phase Block".IBC_start_auto; 
      S     "Fuel Phase Block".IBC_stop_auto; 

_017: NOP   0; 


NETWORK
TITLE = Start process in auto mode

//Start auto mode
      A     "Fuel Phase Block".Status_start; 
      JNB   _080; 

//Copy current recipe
      A(    ; 
      L     "Fuel Phase Block".Current_id; 
      L     "Fuel Phase Block".Recipe.rec_id; 
      <>I   ; 
      )     ; 
      JNB   nex3; 
      L     "Fuel Phase Block".Current_id; 
      T     "Fuel Phase Block".Recipe.rec_id; 

//Logic of mixer working
nex3: A     "Fuel Phase Block".Recipe.mixer_using; 
      JNB   _049; 

      A     "Fuel Phase Block".Mixer_end; 
      O     DB24.DBX   44.4; 
      JNB   nex0; 
      AN    "Fuel Phase Block".Mixer_start; 
      AN    "Fuel Phase Block".Mixer_stop; 
      A     "DB_A-FS-30M".Status_ON; 
      =     "DB_A-FS-30M".Stop_WinCC; 
      JU    _049; 

nex0: AN    "Fuel Phase Block".Mixer_enable; 
      JNB   nex1; 
      A(    ; 
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      )     ; 
      O(    ; 
      A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      )     ; 
      S     "Fuel Phase Block".Mixer_enable; 

nex1: A     "Fuel Phase Block".Mixer_enable; 
      A     "Fuel Phase Block".Status_start; 
      AN    "DB_A-FS-30M".Status_ON; 
      =     "DB_A-FS-30M".Start_WinCC; 

      A     "Fuel Phase Block".Mixer_enable; 
      A     "Fuel Phase Block".Status_start; 
      A     "1sec"; 
      FP    "Fuel Phase Block".FrontMerker1; 

      A     "Fuel Phase Block".FrontMerker1; 
      JNB   nex2; 
      L     "Fuel Phase Block".Mixer_timer; 
      L     1; 
      +I    ; 
      T     "Fuel Phase Block".Mixer_timer; 

nex2: A(    ; 
      L     "Fuel Phase Block".Recipe.mixer_time; 
      L     60; 
      *I    ; 
      L     "Fuel Phase Block".Mixer_timer; 
      <=I   ; 
      )     ; 
      JNB   _049; 
      S     "Fuel Phase Block".Mixer_end; 
      L     0; 
      T     "Fuel Phase Block".Mixer_timer; 

//Check-up is min. oil downnloading finished
_049: A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      >=R   ; 
      )     ; 
      JC    _054; 

//Start transfer min. oil to capacity
//Check-up is one of nodes started
      A(    ; 
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      )     ; 
      O(    ; 
      A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      )     ; 
      JC    MAN; 

//Pump is free DB_P-FS-03M
      A     "DB_P-FS-03M".Status_OFF; 
      AN    "DB_H-FS-50".Start; 
      JC    _050; 

//Pump is free DB_P-FS-04M
      A     "DB_P-FS-04M".Status_OFF; 
      AN    "DB_H-FS-49".Start; 
      JC    _051; 

//Opening valve DB_H-FS-49    
_050: AN    "DB_H-FS-49".Status_Open; 
      AN    "DB_H-FS-49".Start; 
      =     "DB_H-FS-49".Open_WinCC; 

//Start pump DB_P-FS-03M
      A     "DB_H-FS-49".Status_Open; 
      A     "DB_P-FS-03M".Status_OFF; 
      =     "DB_P-FS-03M".Start_WinCC; 
      JU    MAN; 

//Opening valve DB_H-FS-50
_051: AN    "DB_H-FS-50".Status_Open; 
      AN    "DB_H-FS-50".Start; 
      =     "DB_H-FS-50".Open_WinCC; 

//Start pump DB_P-FS-04M
      A     "DB_H-FS-50".Status_Open; 
      A     "DB_P-FS-04M".Status_OFF; 
      =     "DB_P-FS-04M".Start_WinCC; 
      JU    MAN; 

//Check-up is emulgator1 downnloading finished
_054: A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "DB_TenzoM".Analog_Output; 
      <=R   ; 
      )     ; 
      JC    _057; 

//Check-up is node turned on
      A     "DB_H-FS-51".Status_Open; 
      A     "DB_P-FS-10M".Status_ON; 
      JC    MAN; 

//Check-up are nodes turned off
      A     "DB_H-FS-49".Status_Close; 
      A     "DB_H-FS-50".Status_Close; 
      JC    _053; 

//If node 1 is started
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      JNB   _055; 
      A     "DB_P-FS-03M".Status_ON; 
      =     "DB_P-FS-03M".Stop_WinCC; 
      JU    _056; 

//If node 2 is started
_055: A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      JNB   _056; 
      A     "DB_P-FS-04M".Status_ON; 
      =     "DB_P-FS-04M".Stop_WinCC; 
      JU    _056; 

//Stop pump and valve
_056: A     "DB_H-FS-49".Status_Open; 
      A     "DB_P-FS-03M".Status_OFF; 
      =     "DB_H-FS-49".Close_WinCC; 
      A     "DB_H-FS-50".Status_Open; 
      A     "DB_P-FS-04M".Status_OFF; 
      =     "DB_H-FS-50".Close_WinCC; 
      JU    MAN; 

//Transfer emulgator1 to capacity
//Switch DB_H-FS-51 in position 1
_053: AN    "DB_H-FS-51".Status_Open; 
      AN    "DB_H-FS-51".Start; 
      =     "DB_H-FS-51".Open_WinCC; 

//Start pump DB_P-FS-10M
      A     "DB_H-FS-51".Status_Open; 
      A     "DB_P-FS-10M".Status_OFF; 
      AN    DB24.DBX   44.1; 
      =     "DB_P-FS-10M".Start_WinCC; 
      JU    MAN; 

//Check-up is emulgator2 downnloading finished
_057: A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      +R    ; 
      L     "DB_TenzoM".Analog_Output; 
      <=R   ; 
      )     ; 
      JC    _058; 

//Transfer emulgator2 to capacity
//Check-up is node turned on   
      A     "DB_H-FS-51".Status_Close; 
      A     "DB_P-FS-10M".Status_ON; 
      JC    MAN; 

//Stop pump DB_P-FS-10M
      A     "DB_P-FS-10M".Status_ON; 
      A     "DB_H-FS-51".Status_Open; 
      =     "DB_P-FS-10M".Stop_WinCC; 

//Switch valve DB_H-FS-51 to position 2
      AN    "DB_H-FS-51".Status_Close; 
      AN    "DB_H-FS-51".Stop; 
      A     "DB_P-FS-10M".Status_OFF; 
      =     "DB_H-FS-51".Close_WinCC; 

//Start pump DB_P-FS-10M
      A     "DB_H-FS-51".Status_Close; 
      A     "DB_P-FS-10M".Status_OFF; 
      AN    DB24.DBX   44.1; 
      =     "DB_P-FS-10M".Start_WinCC; 
      JU    MAN; 

//Finish downloading of components
//Check-up is pump stopped
_058: A     "DB_P-FS-10M".Status_OFF; 
      JC    _059; 

//Stop pump DB_P-FS-10M
      A     "DB_H-FS-51".Status_Close; 
      A     "DB_P-FS-10M".Status_ON; 
      =     "DB_P-FS-10M".Stop_WinCC; 
      JU    MAN; 

//Finish programm
//Check-up is mixer turned off
_059: A     "DB_A-FS-30M".Status_OFF; 
      JNB   MAN; 

//Check-up is programm finished
      A     "Fuel Phase Block".Status_start; 
      JNB   MAN; 
      R     "Fuel Phase Block".Status_start; 
      R     "Fuel Phase Block".Program_interrupt; 
      R     "Fuel Phase Block".Mixer_end; 
      R     "Fuel Phase Block".Mixer_enable; 
      JU    MAN; 





//Stop programm
_080: A     "Fuel Phase Block".Status_stop; 
      JNB   _060; 

//Turn off mixer
      R     "Fuel Phase Block".Mixer_end; 
      R     "Fuel Phase Block".Mixer_enable; 
      A     "DB_A-FS-30M".Status_ON; 
      JNB   _081; 
      A     "DB_A-FS-30M".Status_ON; 
      =     "DB_A-FS-30M".Stop_WinCC; 

//Stop on step downloading min. oil
_081: A     "Fuel Phase Block".Status_stop; 
      A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      <R    ; 
      )     ; 
      JNB   _082; 

//Turn off min. oil nodes
      A     "DB_H-FS-49".Status_Close; 
      A     "DB_H-FS-50".Status_Close; 
      R     "Fuel Phase Block".Status_stop; 
      JC    MAN; 

//If node 1 is started
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      JNB   _083; 
      A     "DB_P-FS-03M".Status_ON; 
      =     "DB_P-FS-03M".Stop_WinCC; 
      JU    _084; 

//If node 2 is started
_083: A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      JNB   _084; 
      A     "DB_P-FS-04M".Status_ON; 
      =     "DB_P-FS-04M".Stop_WinCC; 

//Close valve
_084: A     "DB_H-FS-49".Status_Open; 
      A     "DB_P-FS-03M".Status_OFF; 
      =     "DB_H-FS-49".Close_WinCC; 
      A     "DB_H-FS-50".Status_Open; 
      A     "DB_P-FS-04M".Status_OFF; 
      =     "DB_H-FS-50".Close_WinCC; 
      JU    MAN; 

//Stop on step downloading emulgator1
_082: A     "Fuel Phase Block".Status_stop; 
      A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "DB_TenzoM".Analog_Output; 
      >R    ; 
      )     ; 
      JNB   _085; 

//Check-up is pump stopped
      A     "DB_P-FS-10M".Status_OFF; 
      R     "Fuel Phase Block".Status_stop; 
      JC    MAN; 

//Stop pump DB_P-FS-10M
      A     "DB_P-FS-10M".Status_ON; 
      =     "DB_P-FS-10M".Stop_WinCC; 
      JU    MAN; 

//Stop on step downloading emulgator2
_085: A     "Fuel Phase Block".Status_stop; 
      A(    ; 
      L     "Fuel Phase Block".Recipe.minoil_amount; 
      L     "Fuel Phase Block".Recipe.emuls1_amount; 
      +R    ; 
      L     "Fuel Phase Block".Recipe.emuls2_amount; 
      +R    ; 
      L     "DB_TenzoM".Analog_Output; 
      >R    ; 
      )     ; 
      JNB   _086; 

//Check-up is pump stopped
      A     "DB_P-FS-10M".Status_OFF; 
      R     "Fuel Phase Block".Status_stop; 
      JC    MAN; 

//Stop pump DB_P-FS-10M
      A     "DB_P-FS-10M".Status_ON; 
      =     "DB_P-FS-10M".Stop_WinCC; 
      JU    MAN; 

_086: A     "Fuel Phase Block".Status_stop; 
      R     "Fuel Phase Block".Status_stop; 
      JU    MAN; 





//Transfer to IBC
_060: A     "Fuel Phase Block".IBC_start_auto; 
      JNB   _070; 
      A     "Fuel Phase Block".Status_ready; 
      R     "Fuel Phase Block".Status_ready; 

//Control weight
      A(    ; 
      L     "DB_TenzoM".Analog_Output; 
      L     "Fuel Phase Block".Weight_control; 
      <R    ; 
      )     ; 
      JNB   _061; 
      R     "Fuel Phase Block".Status_ready; 
      R     "Fuel Phase Block".IBC_start_auto; 
      S     "Fuel Phase Block".IBC_stop_auto; 
      JU    _070; 

//Check-up is node turned on
_061: A     "DB_H-FS-52".Status_Open; 
      A     "DB_P-FS-02M".Status_ON; 
      JC    MAN; 

//Open valve DB_H-FS-52
      A     "DB_P-FS-02M".Status_OFF; 
      AN    "DB_H-FS-52".Status_Open; 
      AN    "DB_H-FS-52".Start; 
      =     "DB_H-FS-52".Open_WinCC; 

//Start pump DB_P-FS-02M
      A     "DB_H-FS-52".Status_Open; 
      A     "DB_P-FS-02M".Status_OFF; 
      =     "DB_P-FS-02M".Start_WinCC; 
      JU    MAN; 





//Stop transfer to IBC
_070: A     "Fuel Phase Block".IBC_stop_auto; 
      JNB   MAN; 

//Check-up is turned off
      A     "DB_P-FS-02M".Status_OFF; 
      A     "DB_H-FS-52".Status_Close; 
      R     "Fuel Phase Block".IBC_stop_auto; 
      JC    MAN; 

//Stop pump DB_P-FS-02M
      A     "DB_P-FS-02M".Status_ON; 
      A     "DB_H-FS-52".Status_Open; 
      =     "DB_P-FS-02M".Stop_WinCC; 

//Close valve DB_H-FS-52
      A     "DB_P-FS-02M".Status_OFF; 
      AN    "DB_H-FS-52".Status_Close; 
      AN    "DB_H-FS-52".Stop; 
      =     "DB_H-FS-52".Close_WinCC; 
      JU    MAN; 

NETWORK
TITLE = Start machines in manual mode

//Start mixer
MAN:  A     "Fuel Phase Block".Mixer_start; 
      JNB   _100; 
      A     "DB_A-FS-30M".Status_ON; 
      JC    _100; 
      A     "DB_A-FS-30M".Status_OFF; 
      AN    DB24.DBX   44.4; 
      =     "DB_A-FS-30M".Start_WinCC; 

//Stop mixer
_100: A     "Fuel Phase Block".Mixer_stop; 
      JNB   _101; 
      A     "DB_A-FS-30M".Status_OFF; 
      R     "Fuel Phase Block".Mixer_stop; 
      JC    _101; 
      A     "DB_A-FS-30M".Status_ON; 
      =     "DB_A-FS-30M".Stop_WinCC; 

//Start downloading min. oil
_101: A     "Fuel Phase Block".Minoil_start; 
      JNB   _102; 

//Process is started
      AN    "Fuel Phase Block".Process_busy; 
      S     "Fuel Phase Block".Process_busy; 

//Check-up is one of nodes started
      A(    ; 
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      )     ; 
      O(    ; 
      A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      )     ; 
      JC    END; 

//Pump is free DB_P-FS-03M
      A     "DB_P-FS-03M".Status_OFF; 
      AN    "DB_H-FS-50".Start; 
      JC    _103; 

//Pump is free DB_P-FS-04M
      A     "DB_P-FS-04M".Status_OFF; 
      AN    "DB_H-FS-49".Start; 
      JC    _104; 

//Open valve DB_H-FS-49    
_103: AN    "DB_H-FS-49".Status_Open; 
      AN    "DB_H-FS-49".Start; 
      =     "DB_H-FS-49".Open_WinCC; 

//Start pump DB_P-FS-03M
      A     "DB_H-FS-49".Status_Open; 
      A     "DB_P-FS-03M".Status_OFF; 
      =     "DB_P-FS-03M".Start_WinCC; 
      JU    END; 

//Open valve DB_H-FS-50
_104: AN    "DB_H-FS-50".Status_Open; 
      AN    "DB_H-FS-50".Start; 
      =     "DB_H-FS-50".Open_WinCC; 

//Start pump DB_P-FS-04M
      A     "DB_H-FS-50".Status_Open; 
      A     "DB_P-FS-04M".Status_OFF; 
      =     "DB_P-FS-04M".Start_WinCC; 
      JU    END; 

//Check-up are nodes stopped
_102: A     "Fuel Phase Block".Minoil_stop; 
      JNB   _105; 
      A     "DB_H-FS-49".Status_Close; 
      A     "DB_H-FS-50".Status_Close; 
      R     "Fuel Phase Block".Minoil_stop; 
      R     "Fuel Phase Block".Process_busy; 
      JC    _105; 

//If node 1 is started
      A     "DB_P-FS-03M".Status_ON; 
      A     "DB_H-FS-49".Status_Open; 
      JNB   _106; 
      L     115; 
      T     MW   100; 
      L     258; 
      T     MW   102; 
      JU    _107; 

//If node 2 is started
_106: A     "DB_P-FS-04M".Status_ON; 
      A     "DB_H-FS-50".Status_Open; 
      JNB   _107; 
      L     116; 
      T     MW   100; 
      L     257; 
      T     MW   102; 
      JU    _107; 

//Stop pump and valve     
_107: NOP   0; 
      OPN   DB [MW 100]; 
      OPN   DI [MW 102]; 
      A     DBX    4.2; 
      =     DBX    0.4; 
      A     DBX    4.3; 
      =     DIX    0.4; 
      JU    END; 

//Downloading emulgator 1
_105: A     "Fuel Phase Block".Emuls1_start; 
      JNB   _108; 

//Process is started
      AN    "Fuel Phase Block".Process_busy; 
      S     "Fuel Phase Block".Process_busy; 

//Check-up is node turned on
      A     "DB_H-FS-51".Status_Open; 
      A     "DB_P-FS-10M".Status_ON; 
      JC    END; 

//Switch valve DB_H-FS-51 to position 1
      AN    "DB_H-FS-51".Status_Open; 
      AN    "DB_H-FS-51".Start; 
      =     "DB_H-FS-51".Open_WinCC; 

//Start pump DB_P-FS-10M
      A     "DB_H-FS-51".Status_Open; 
      A     "DB_P-FS-10M".Status_OFF; 
      AN    DB24.DBX   44.1; 
      =     "DB_P-FS-10M".Start_WinCC; 
      JU    END; 

//Check-up is node turned off
_108: A     "Fuel Phase Block".Emuls1_stop; 
      JNB   _109; 
      A     "DB_P-FS-10M".Status_OFF; 
      R     "Fuel Phase Block".Emuls1_stop; 
      R     "Fuel Phase Block".Process_busy; 
      JC    _109; 

//Stop pump DB_P-FS-10M
      A     "DB_P-FS-10M".Status_ON; 
      A     "DB_H-FS-51".Status_Open; 
      =     "DB_P-FS-10M".Stop_WinCC; 
      JU    END; 

//Downloading emulgator2
_109: A     "Fuel Phase Block".Emuls2_start; 
      JNB   _110; 

//Process is started
      AN    "Fuel Phase Block".Process_busy; 
      S     "Fuel Phase Block".Process_busy; 

//Check-up is node turned on
      A     "DB_H-FS-51".Status_Close; 
      A     "DB_P-FS-10M".Status_ON; 
      JC    END; 

//Switch valve DB_H-FS-51 to position 2
      AN    "DB_H-FS-51".Status_Close; 
      AN    "DB_H-FS-51".Stop; 
      A     "DB_P-FS-10M".Status_OFF; 
      =     "DB_H-FS-51".Close_WinCC; 

//Start pump DB_P-FS-10M
      A     "DB_H-FS-51".Status_Close; 
      A     "DB_P-FS-10M".Status_OFF; 
      AN    DB24.DBX   44.1; 
      =     "DB_P-FS-10M".Start_WinCC; 
      JU    END; 

//Check-up is node turned off
_110: A     "Fuel Phase Block".Emuls2_stop; 
      JNB   _111; 
      A     "DB_P-FS-10M".Status_OFF; 
      R     "Fuel Phase Block".Emuls2_stop; 
      R     "Fuel Phase Block".Process_busy; 
      JC    _111; 

//Stop pump DB_P-FS-10M
      A     "DB_P-FS-10M".Status_ON; 
      A     "DB_H-FS-51".Status_Close; 
      =     "DB_P-FS-10M".Stop_WinCC; 
      JU    END; 

//Transfer to IBC
_111: A     "Fuel Phase Block".IBC_start; 
      JNB   _112; 

//Reset FP is ready
      A     "Fuel Phase Block".Status_ready; 
      R     "Fuel Phase Block".Status_ready; 

//Process is started
      AN    "Fuel Phase Block".Process_busy; 
      S     "Fuel Phase Block".Process_busy; 

//Check-up is node turned on
      A     "DB_H-FS-52".Status_Open; 
      A     "DB_P-FS-02M".Status_ON; 
      JC    END; 

//Open valve DB_H-FS-52
      A     "DB_P-FS-02M".Status_OFF; 
      AN    "DB_H-FS-52".Status_Open; 
      AN    "DB_H-FS-52".Start; 
      =     "DB_H-FS-52".Open_WinCC; 

//Start pump DB_P-FS-02M
      A     "DB_H-FS-52".Status_Open; 
      A     "DB_P-FS-02M".Status_OFF; 
      =     "DB_P-FS-02M".Start_WinCC; 
      JU    END; 

//Check-up is node turned off
_112: A     "Fuel Phase Block".IBC_stop; 
      JNB   END; 
      A     "DB_P-FS-02M".Status_OFF; 
      A     "DB_H-FS-52".Status_Close; 
      R     "Fuel Phase Block".IBC_stop; 
      R     "Fuel Phase Block".Process_busy; 
      JC    END; 

//Stop pump DB_P-FS-02M
      A     "DB_P-FS-02M".Status_ON; 
      A     "DB_H-FS-52".Status_Open; 
      =     "DB_P-FS-02M".Stop_WinCC; 

//Close valve DB_H-FS-52
      A     "DB_P-FS-02M".Status_OFF; 
      AN    "DB_H-FS-52".Status_Close; 
      AN    "DB_H-FS-52".Stop; 
      =     "DB_H-FS-52".Close_WinCC; 

END:  NOP   0; 
END_FUNCTION

